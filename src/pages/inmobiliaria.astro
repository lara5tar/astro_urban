---
import GeneralLayout from "../layouts/GeneralLayout.astro";
import { Image } from "astro:assets";
import { API_CONFIG } from "../config/api.js";

// Forzar renderizado del lado del servidor para contenido dinámico
export const prerender = false;

// Función para obtener propiedades desde la API con soporte para paginación
const fetchProperties = async (page = 1) => {
    try {
        console.log(
            `Fetching properties from API: ${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PROPERTIES}?page=${page}`,
        );

        const response = await fetch(
            `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PROPERTIES}?page=${page}`,
            {
                headers: {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    // Agregar cache busting para evitar cache del navegador
                    "Cache-Control": "no-cache, no-store, must-revalidate",
                    Pragma: "no-cache",
                    Expires: "0",
                },
                // Evitar cache del fetch
                cache: "no-store",
            },
        );

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log(`Fetched ${data?.data?.length || 0} properties from API`);

        // Verificar si hay datos y transformarlos al formato necesario
        if (data && data.data && Array.isArray(data.data)) {
            return {
                properties: data.data.map((property: any) => ({
                    id: property.id,
                    imageUrl:
                        property.images && property.images.length > 0
                            ? property.images[0]
                            : "https://placehold.co/800x800/222/fff?text=Imagen+no+disponible",
                    text: `${property.type.toUpperCase()} - ${property.investment_formatted}`,
                    location: property.location
                        ? `${property.location.line2}`
                        : "Ubicación no disponible",
                    features: property.features || [],
                    type: property.type,
                    // Guardar el resto de datos que podrían ser útiles para la página de detalle
                    fullData: property,
                })),
                meta: data.meta || {},
                hasMorePages: data.meta?.current_page < data.meta?.last_page,
            };
        }
        return { properties: [], meta: {}, hasMorePages: false };
    } catch (error) {
        console.error("Error al obtener propiedades:", error);
        return { properties: [], meta: {}, hasMorePages: false };
    }
};

// Obtener la primera página de propiedades para renderizar inicialmente
const initialData = await fetchProperties(1);
const properties = initialData.properties;
const initialMeta = initialData.meta;
const hasMorePages = initialData.hasMorePages;

// Agregar timestamp para debugging
const buildTime = new Date().toISOString();
console.log(
    `Page rendered at: ${buildTime}, Properties count: ${properties.length}`,
);
---

<GeneralLayout title="Inmobiliaria - Urban Real Estate">
    <!-- Debug info (solo visible en desarrollo) -->
    {
        process.env.NODE_ENV === "development" && (
            <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4">
                <p class="font-bold">Debug Info:</p>
                <p>Página renderizada: {buildTime}</p>
                <p>Propiedades cargadas: {properties.length}</p>
                <p>API URL: {API_CONFIG.BASE_URL}</p>
            </div>
        )
    }

    <!-- Grid de propiedades -->
    <div class="block">
        <div
            id="properties-grid"
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-0"
        >
            {
                properties.map((property: any, index: number) => (
                    <div class="relative grid-item" data-index={index}>
                        <a
                            href={`/inmobiliaria/propiedad/${property.id}`}
                            class="block"
                        >
                            <Image
                                src={property.imageUrl}
                                alt={`${property.type} - ${property.location}`}
                                class="w-full aspect-square object-cover transition-transform duration-300 ease-in-out hover:scale-105"
                                loading={index < 6 ? "eager" : "lazy"}
                                width={800}
                                height={800}
                            />
                            <div class="absolute inset-0 flex flex-col justify-center items-center bg-black/30 hover:bg-black/50 transition-colors duration-300">
                                <div class="font-montserrat font-bold text-lg md:text-xl lg:text-2xl tracking-widest py-2 px-4 bg-black/40 uppercase text-center inline-block min-w-[150px] max-w-[90%] mx-auto border border-white/50 text-white">
                                    {property.location}
                                </div>
                            </div>
                        </a>
                    </div>
                ))
            }
        </div>

        <!-- Indicador de carga para lazy loading -->
        <div id="loading-indicator" class="text-center py-8 hidden">
            <div
                class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-[#2e8d80]"
            >
            </div>
            <p class="mt-2 text-gray-600 font-montserrat">
                Cargando más propiedades...
            </p>
        </div>

        <!-- Indicador de fin de resultados -->
        <div id="end-of-results" class="text-center py-8 hidden">
            <p class="text-gray-600 font-montserrat">
                No hay más propiedades disponibles
            </p>
        </div>
    </div>

    <script
        define:vars={{
            initialMeta,
            hasMorePages,
            apiBaseUrl: API_CONFIG.BASE_URL,
        }}
    >
        // Improved domino animation effect with fresh data fetching
        document.addEventListener("DOMContentLoaded", () => {
            const items = document.querySelectorAll(".grid-item");
            const propertiesGrid = document.getElementById("properties-grid");
            const loadingIndicator =
                document.getElementById("loading-indicator");
            const endOfResults = document.getElementById("end-of-results");

            // Variables para el lazy loading
            let currentPage = initialMeta?.current_page || 1;
            let isLoading = false;
            let noMorePages = !hasMorePages;

            // Check if element is approaching viewport (much earlier than before)
            const isApproachingViewport = (element) => {
                const rect = element.getBoundingClientRect();
                const windowHeight =
                    window.innerHeight || document.documentElement.clientHeight;
                // Element is considered "approaching" if it's within 1.5 screen heights
                return rect.top <= windowHeight * 1.5;
            };

            // Animate items that are approaching the viewport
            const animateItems = () => {
                document
                    .querySelectorAll(".grid-item:not(.animated)")
                    .forEach((item) => {
                        if (isApproachingViewport(item)) {
                            const index = parseInt(item.dataset.index ?? "0");
                            const delay = (index % 12) * 70; // Solo aplicamos delay a los primeros 12 items por página
                            setTimeout(() => {
                                item.classList.add("animated");
                            }, delay);
                        }
                    });
            };

            // Función para cargar más propiedades
            const loadMoreProperties = async () => {
                if (isLoading || noMorePages) return;

                isLoading = true;
                loadingIndicator.classList.remove("hidden");

                try {
                    const nextPage = currentPage + 1;
                    // Usar la URL base de la API directamente con cache busting
                    const cacheBuster = new Date().getTime();
                    const apiUrl = `${apiBaseUrl}properties?page=${nextPage}&_t=${cacheBuster}`;

                    console.log(`Loading more properties from: ${apiUrl}`);

                    const response = await fetch(apiUrl, {
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                            "Cache-Control":
                                "no-cache, no-store, must-revalidate",
                            Pragma: "no-cache",
                        },
                        cache: "no-store",
                    });

                    if (!response.ok) {
                        throw new Error(
                            `Error al cargar más propiedades: ${response.status}`,
                        );
                    }

                    const data = await response.json();
                    console.log(
                        `Loaded ${data?.data?.length || 0} more properties`,
                    );

                    // Si hay propiedades, agregarlas al grid
                    if (data.data && data.data.length > 0) {
                        currentPage = nextPage;

                        // Agregar nuevas propiedades al grid
                        data.data.forEach((property, idx) => {
                            const globalIndex =
                                document.querySelectorAll(".grid-item").length;
                            const propertyElement =
                                document.createElement("div");
                            propertyElement.className = "relative grid-item";
                            propertyElement.dataset.index =
                                globalIndex.toString();

                            const imageUrl =
                                property.images && property.images.length > 0
                                    ? property.images[0]
                                    : "https://placehold.co/800x800/222/fff?text=Imagen+no+disponible";

                            const location = property.location
                                ? property.location.line2
                                : "Ubicación no disponible";

                            propertyElement.innerHTML = `
                                <a href="/inmobiliaria/propiedad/${property.id}" class="block">
                                    <img
                                        src="${imageUrl}"
                                        alt="${property.type} - ${location}"
                                        class="w-full aspect-square object-cover transition-transform duration-300 ease-in-out hover:scale-105"
                                        loading="lazy"
                                        width="800"
                                        height="800"
                                    />
                                    <div class="absolute inset-0 flex flex-col justify-center items-center bg-black/30 hover:bg-black/50 transition-colors duration-300">
                                        <div class="font-montserrat font-bold text-lg md:text-xl lg:text-2xl tracking-widest py-2 px-4 bg-black/40 uppercase text-center inline-block min-w-[150px] max-w-[90%] mx-auto border border-white/50 text-white">
                                            ${location}
                                        </div>
                                    </div>
                                </a>
                            `;

                            propertiesGrid.appendChild(propertyElement);
                        });

                        // Comprobar si hay más páginas
                        noMorePages =
                            data.meta?.current_page >= data.meta?.last_page;

                        // Animar nuevos elementos
                        setTimeout(animateItems, 100);
                    } else {
                        noMorePages = true;
                    }
                } catch (error) {
                    console.error("Error al cargar más propiedades:", error);
                } finally {
                    isLoading = false;
                    loadingIndicator.classList.add("hidden");

                    if (noMorePages) {
                        endOfResults.classList.remove("hidden");
                    }
                }
            };

            // Función para verificar si necesitamos cargar más propiedades
            const checkForLoadMore = () => {
                if (isLoading || noMorePages) return;

                // Verificar si estamos cerca del final de la página
                const scrollPosition = window.scrollY + window.innerHeight;
                const pageHeight = document.body.scrollHeight;
                const threshold = 200; // píxeles antes del final

                if (pageHeight - scrollPosition < threshold) {
                    loadMoreProperties();
                }
            };

            // Run animation on load and scroll
            animateItems();
            window.addEventListener("scroll", () => {
                animateItems();
                checkForLoadMore();
            });

            // Additional trigger for any images that might be missed
            setTimeout(animateItems, 300);

            // También verificamos inicialmente si necesitamos cargar más
            // (útil para pantallas grandes donde el scroll puede no ser necesario)
            setTimeout(checkForLoadMore, 1000);
        });
    </script>

    <style>
        .grid-item {
            overflow: hidden;
            position: relative;
            opacity: 0;
            transform: translateY(
                30px
            ); /* Reduced from 50px for subtler animation */
            transition:
                opacity 0.4s ease,
                transform 0.4s ease; /* Faster transition */
        }

        .grid-item.animated {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</GeneralLayout>
