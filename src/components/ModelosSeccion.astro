---
import PropiedadCard from "./PropiedadCard.astro";
import type { PropiedadProps } from "./PropiedadCard.astro";

interface Props {
    modelos: PropiedadProps[];
}

const { modelos } = Astro.props;
---

<section
    id="modelos"
    class="w-full px-4 py-12 md:py-16 bg-gradient-to-b from-gray-900 to-black"
>
    <div class="container mx-auto">
        <h2
            class="text-2xl md:text-4xl font-poppins font-bold text-center mb-12"
        >
            Nuestros Modelos
        </h2>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {modelos.map((modelo) => <PropiedadCard propiedad={modelo} />)}
        </div>
    </div>
</section>

<script>
    // Funcionalidad de modales
    document.addEventListener("DOMContentLoaded", function () {
        // Modal de detalles
        const modeloButtons = document.querySelectorAll(".modelo-detalles");
        const modalContainers = document.querySelectorAll(".modal-container");
        const modalCloseButtons = document.querySelectorAll(".modal-close");
        const modalBackdrops = document.querySelectorAll(".modal-backdrop");

        // Abrir modal
        modeloButtons.forEach((button) => {
            button.addEventListener("click", () => {
                const modeloId = button.getAttribute("data-modelo");
                const modal = document.getElementById(`modal-${modeloId}`);

                if (modal) {
                    modal.classList.remove("hidden");
                    document.body.style.overflow = "hidden";

                    // Animar entrada
                    setTimeout(() => {
                        const modalContent =
                            modal.querySelector(".modal-content");
                        if (modalContent) {
                            modalContent.classList.remove(
                                "opacity-0",
                                "scale-95",
                            );
                            modalContent.classList.add(
                                "opacity-100",
                                "scale-100",
                            );
                        }
                    }, 10);
                }
            });
        });

        // Cerrar modal
        function closeModal(modal: HTMLElement) {
            const modalContent = modal.querySelector(".modal-content");
            if (modalContent) {
                modalContent.classList.remove("opacity-100", "scale-100");
                modalContent.classList.add("opacity-0", "scale-95");

                setTimeout(() => {
                    modal.classList.add("hidden");
                    document.body.style.overflow = "";
                }, 300);
            }
        }

        modalCloseButtons.forEach((button) => {
            button.addEventListener("click", () => {
                const modal = button.closest(".modal-container");
                if (modal) closeModal(modal as HTMLElement);
            });
        });

        modalBackdrops.forEach((backdrop) => {
            backdrop.addEventListener("click", () => {
                const modal = backdrop.closest(".modal-container");
                if (modal) closeModal(modal as HTMLElement);
            });
        });

        // Cerrar con tecla Escape
        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
                modalContainers.forEach((modal) => {
                    if (!modal.classList.contains("hidden")) {
                        closeModal(modal as HTMLElement);
                    }
                });
            }
        });
    });
</script>
