---
import GeneralLayout from "../../layouts/GeneralLayout.astro";
import { Image } from "astro:assets";
import logo from "/src/public/icons/icono.png";
import { API_CONFIG } from "../../config/api.js";
---

<GeneralLayout
    title="Propiedad - Urban Inmobiliaria"
    description="Detalles de la propiedad"
    image="/icono.png"
>
    <!-- Loading inicial -->
    <div
        id="property-loading"
        class="min-h-screen bg-white flex items-center justify-center"
    >
        <div class="flex flex-col items-center">
            <div
                class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-[#2e8d80] mb-4"
            >
            </div>
            <p class="text-gray-600 font-montserrat">Cargando propiedad...</p>
        </div>
    </div>

    <!-- Contenido de la propiedad (se llenará dinámicamente) -->
    <main id="property-content" class="bg-white min-h-screen hidden">
        <!-- El contenido se generará dinámicamente -->
    </main>

    <!-- Página de error 404 -->
    <div
        id="property-not-found"
        class="min-h-screen bg-white items-center justify-center hidden"
    >
        <div class="text-center">
            <h1 class="text-6xl font-bold text-gray-300 mb-4">404</h1>
            <h2 class="text-2xl font-bold text-gray-800 mb-4">
                Propiedad no encontrada
            </h2>
            <p class="text-gray-600 mb-8">
                La propiedad que buscas no existe o ha sido removida.
            </p>
            <a
                href="/inmobiliaria"
                class="inline-flex items-center px-6 py-3 bg-[#2e8d80] text-white rounded-md hover:bg-[#267569] transition-colors"
            >
                Ver todas las propiedades
            </a>
        </div>
    </div>

    <script define:vars={{ API_CONFIG }}>
        document.addEventListener("DOMContentLoaded", async () => {
            const loadingEl = document.getElementById("property-loading");
            const contentEl = document.getElementById("property-content");
            const notFoundEl = document.getElementById("property-not-found");

            // Obtener el ID de la propiedad desde la URL del navegador usando query parameters
            const urlParams = new URLSearchParams(window.location.search);
            const propertyId = urlParams.get("id");

            console.log("Cargando propiedad con ID:", propertyId);

            // Si no hay ID en la URL, redirigir a inmobiliaria
            if (!propertyId) {
                console.log(
                    "No se encontró ID en la URL, redirigiendo a inmobiliaria",
                );
                window.location.href = "/inmobiliaria";
                return;
            }

            // Función para obtener una propiedad por ID
            async function fetchProperty(id) {
                try {
                    const apiUrl = `${API_CONFIG.BASE_URL}properties/${id}`;

                    console.log(`Fetching property from: ${apiUrl}`);

                    const response = await fetch(apiUrl, {
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                            "Cache-Control":
                                "no-cache, no-store, must-revalidate",
                            Pragma: "no-cache",
                        },
                        cache: "no-store",
                    });

                    if (!response.ok) {
                        throw new Error(
                            `HTTP error! status: ${response.status}`,
                        );
                    }

                    const data = await response.json();
                    console.log("Property data:", data);

                    // The API returns data in a "data" property, check if it exists
                    if (data.data) {
                        return data.data;
                    }
                    // If no data property, return null
                    return null;
                } catch (error) {
                    console.error(`Error fetching property ${id}:`, error);
                    return null;
                }
            }

            // Función para renderizar la propiedad
            function renderProperty(property) {
                const validImages =
                    property.images && property.images.length > 0
                        ? property.images.filter(
                              (img) => img && img.trim() !== "",
                          )
                        : [
                              "https://via.placeholder.com/500x500/eeeeee/333333?text=No+disponible",
                          ];

                contentEl.innerHTML = `
                    <div class="mx-auto max-w-5xl lg:max-w-6xl px-4 sm:px-6 py-10">
                        <!-- Header responsivo con logo y estado de propiedad -->
                        <div class="flex flex-col sm:flex-row justify-between items-end mb-5 sm:mb-0 gap-4">
                            <div class="hidden sm:flex items-center h-full ml-0 sm:ml-5">
                                <img
                                    src="/icono.png"
                                    alt="Urban Inmobiliaria"
                                    class="h-14 sm:h-16 md:h-20 object-contain"
                                    width="160"
                                    height="160"
                                />
                            </div>
                            <div class="bg-[#2e8d80] w-full sm:w-auto pr-0 pb-2 sm:pb-0 sm:pr-5 flex items-center">
                                <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold uppercase tracking-wider text-white px-5 sm:px-10 md:px-20 bg-gray-800 h-full w-full sm:w-auto py-3 sm:py-8 flex items-center justify-center">
                                    ${property.is_for_sale == 1 ? "VENTA" : "RENTA"}
                                </h1>
                            </div>
                        </div>

                        <div class="mt-10"><!-- Espaciador --></div>

                        <!-- Galería de imágenes responsiva -->
                        <div class="mb-10">
                            <div class="grid grid-cols-1 sm:grid-cols-2 grid-rows-1 sm:grid-rows-2 h-auto sm:h-[500px] md:h-[700px]">
                                ${validImages
                                    .slice(0, 4)
                                    .map(
                                        (img, index) => `
                                    <div class="w-full h-[250px] sm:h-full overflow-hidden cursor-pointer gallery-image" data-index="${index}">
                                        <img
                                            src="${img}"
                                            alt="${property.type} - Vista ${index + 1}"
                                            class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                                        />
                                    </div>
                                `,
                                    )
                                    .join("")}
                            </div>
                        </div>

                        <!-- Información de la propiedad -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <div class="bg-white mb-5">
                                    <a href="${property.google_maps_url || "#"}" target="_blank" rel="noopener noreferrer" class="block hover:opacity-90 transition-opacity">
                                        <h2 class="text-xl md:text-2xl font-bold uppercase text-gray-800 text-center mb-4 border border-gray-800 py-2 hover:bg-gray-100 transition-colors flex items-center justify-center">
                                            UBICACIÓN
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                            </svg>
                                        </h2>
                                        <div class="text-lg md:text-xl text-center">
                                            ${property.location?.line1 || "Dirección no disponible"}<br/>
                                            ${property.location?.line2 || ""}<br/>
                                            ${property.location?.line3 || ""}
                                        </div>
                                    </a>
                                </div>
                                <div class="bg-white">
                                    <h2 class="text-xl md:text-2xl font-bold uppercase text-gray-800 text-center mb-4 border border-gray-800 py-2">
                                        INVERSIÓN
                                    </h2>
                                    <p class="text-2xl md:text-3xl font-bold text-gray-800 text-center">
                                        ${property.investment_formatted || "Precio no disponible"}
                                    </p>
                                </div>
                            </div>

                            <div class="bg-[#2e8d80] pr-0 pb-3 sm:pb-0 sm:pr-5">
                                <div class="h-full w-full bg-gray-800 text-white p-5 flex flex-col justify-start">
                                    <h2 class="text-xl md:text-2xl font-bold uppercase text-white text-center mb-4 md:mb-6 border border-white py-2">
                                        CARACTERÍSTICAS
                                    </h2>
                                    ${
                                        property.features &&
                                        property.features.length > 0
                                            ? `
                                        <div class="grid grid-cols-1 md:gap-4">
                                            ${property.features
                                                .map(
                                                    (feature) => `
                                                <div class="flex items-center p-2 md:p-0">
                                                    <div class="mr-3 text-[#2e8d80] bg-white rounded-full p-1 flex-shrink-0">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                                        </svg>
                                                    </div>
                                                    <span class="text-white text-base md:text-lg">${feature}</span>
                                                </div>
                                            `,
                                                )
                                                .join("")}
                                        </div>
                                    `
                                            : `
                                        <p class="text-center text-white">Características no disponibles</p>
                                    `
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Configurar modal de imágenes
                setupImageModal(validImages);
            }

            // Función para configurar el modal de imágenes
            function setupImageModal(images) {
                // Crear modal si no existe
                if (!document.getElementById("imageModal")) {
                    const modalHTML = `
                        <div id="imageModal" class="fixed inset-0 bg-black/80 z-50 items-center justify-center hidden">
                            <div class="relative w-full h-full flex flex-col justify-center items-center p-4">
                                <button id="closeModal" class="absolute top-4 right-4 text-white text-4xl z-10 hover:text-gray-300">&times;</button>
                                <button id="prevImage" class="absolute left-4 text-white text-6xl z-10 opacity-70 hover:opacity-100">&#10094;</button>
                                <button id="nextImage" class="absolute right-4 text-white text-6xl z-10 opacity-70 hover:opacity-100">&#10095;</button>
                                <div id="carouselImages" class="w-full max-w-4xl h-full max-h-[80vh] flex items-center justify-center"></div>
                                <div class="absolute bottom-4 w-full text-center">
                                    <span id="currentImageIndicator" class="bg-white bg-opacity-70 text-black px-3 py-1 rounded-full text-sm">1 / ${images.length}</span>
                                </div>
                            </div>
                        </div>
                    `;
                    document.body.insertAdjacentHTML("beforeend", modalHTML);
                }

                // Configurar eventos del modal
                let currentImageIndex = 0;
                const modal = document.getElementById("imageModal");
                const carouselImages =
                    document.getElementById("carouselImages");
                const indicator = document.getElementById(
                    "currentImageIndicator",
                );

                function updateModal() {
                    carouselImages.innerHTML = `<img src="${images[currentImageIndex]}" alt="Imagen ${currentImageIndex + 1}" class="max-w-full max-h-full object-contain">`;
                    indicator.textContent = `${currentImageIndex + 1} / ${images.length}`;
                }

                document.getElementById("closeModal").onclick = () => {
                    modal.classList.add("hidden");
                    modal.classList.remove("flex");
                };

                document.getElementById("prevImage").onclick = () => {
                    currentImageIndex =
                        (currentImageIndex - 1 + images.length) % images.length;
                    updateModal();
                };

                document.getElementById("nextImage").onclick = () => {
                    currentImageIndex = (currentImageIndex + 1) % images.length;
                    updateModal();
                };

                // Abrir modal al hacer clic en imágenes
                document.querySelectorAll(".gallery-image").forEach((img) => {
                    img.onclick = () => {
                        currentImageIndex = parseInt(img.dataset.index) || 0;
                        updateModal();
                        modal.classList.remove("hidden");
                        modal.classList.add("flex");
                    };
                });
            }

            // Cargar la propiedad
            try {
                const property = await fetchProperty(propertyId);

                if (property) {
                    renderProperty(property);
                    loadingEl.classList.add("hidden");
                    contentEl.classList.remove("hidden");
                } else {
                    loadingEl.classList.add("hidden");
                    notFoundEl.classList.remove("hidden");
                    notFoundEl.classList.add("flex");
                }
            } catch (error) {
                console.error("Error loading property:", error);
                loadingEl.classList.add("hidden");
                notFoundEl.classList.remove("hidden");
                notFoundEl.classList.add("flex");
            }
        });
    </script>
</GeneralLayout>
