---
import "../tailwind.css";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Option {
    id: string;
    title: string;
    description: string;
    image: ImageMetadata;
}

interface Props {
    title: string;
    mainImage: ImageMetadata;
    description: string;
    options: Option[];
    prevTaller?: string; // Optional path to previous workshop
    nextTaller?: string; // Optional path to next workshop
}

const { title, mainImage, description, options, prevTaller, nextTaller } =
    Astro.props;
---

<div class="relative w-full h-screen overflow-hidden bg-gray-950">
    <!-- Main image background -->
    <div
        id="background-container"
        class="absolute top-0 left-0 w-full h-full z-10"
    >
        <div
            class="absolute w-full h-full opacity-0 transition-opacity duration-500 ease-in-out"
            id="main-image"
        >
            <Image
                src={mainImage}
                alt={title}
                class="w-full h-full object-cover"
            />
        </div>

        {
            options.map((option) => (
                <div
                    class="absolute w-full h-full opacity-0 transition-opacity duration-500 ease-in-out"
                    id={`image-${option.id}`}
                >
                    <Image
                        src={option.image}
                        alt={option.title}
                        class="w-full h-full object-cover image-content"
                    />
                </div>
            ))
        }
    </div>

    <!-- Content layout -->
    <div class="absolute top-0 left-0 w-full h-full flex z-20 pt-20 box-border">
        <!-- Main description panel (left side) - INCREASED WIDTH -->
        <div
            class="w-[50%] max-w-[700px] h-full bg-black/80 text-white p-8 flex flex-col overflow-y-auto content-panel"
        >
            <!-- Fixed mobile navigation layout for long titles -->
            <div class="title-nav-container">
                {
                    prevTaller && (
                        <a
                            href={prevTaller}
                            class="mobile-nav-button prev initially-hidden"
                            aria-label="Taller anterior"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                class="w-5 h-5"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M15 19l-7-7 7-7"
                                />
                            </svg>
                        </a>
                    )
                }

                <h1 class="font-poppins font-bold">
                    {title}
                </h1>

                {
                    nextTaller && (
                        <a
                            href={nextTaller}
                            class="mobile-nav-button next initially-hidden"
                            aria-label="Taller siguiente"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                class="w-5 h-5"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M9 5l7 7-7 7"
                                />
                            </svg>
                        </a>
                    )
                }
            </div>

            <div class="w-100% h-[3px] bg-[#2e8d80] my-4 divider opacity-0">
            </div>

            <!-- Remove flex-grow to prevent expansion -->
            <div class="description-container">
                <div
                    id="main-description"
                    class="block description text-justify opacity-0"
                    set:html={description}
                />
            </div>

            <!-- Options container with minimal spacing -->
            <div class="mt-4 opacity-0 options-container">
                <div class="flex flex-wrap gap-2.5 mb-4 options-list">
                    {
                        options.map((option) => (
                            <button
                                class="relative w-full bg-[#2e8d80]/30 border border-[#2e8d80] text-white py-2 px-4 rounded cursor-pointer font-montserrat font-medium transition-all duration-300 hover:bg-[#2e8d80] option-button"
                                data-option-id={option.id}
                            >
                                {option.title}
                            </button>
                        ))
                    }
                </div>

                <!-- Mobile descriptions container -->
                <div class="mobile-descriptions">
                    {
                        options.map((option) => (
                            <div
                                id={`mobile-description-${option.id}`}
                                class="mobile-option-description"
                                data-option-id={option.id}
                            >
                                <h3 class="text-xl font-poppins mb-2 text-[#2e8d80]">
                                    {option.title}
                                </h3>
                                <div
                                    class="text-justify"
                                    set:html={option.description}
                                />
                            </div>
                        ))
                    }
                </div>
            </div>
        </div>

        <!-- Option descriptions panel (right side) - Only visible on desktop via CSS -->
        <div
            class="w-[50%] h-full flex items-end justify-center relative pb-16 desktop-descriptions"
        >
            {
                options.map((option) => (
                    <div
                        id={`description-${option.id}`}
                        class="hidden w-full mx-auto bg-black/70 text-white p-8 option-description"
                        data-option-id={option.id}
                    >
                        <div
                            class="text-justify"
                            set:html={option.description}
                        />
                    </div>
                ))
            }
        </div>
    </div>
</div>

<script>
    // Use window load event instead of DOMContentLoaded for more reliable timing
    window.addEventListener("load", function () {
        // Get elements
        const optionButtons = document.querySelectorAll(".option-button");
        const mainImage = document.getElementById("main-image");
        const mainDescription = document.getElementById("main-description");
        const title = document.querySelector(".content-panel h1");
        const divider = document.querySelector(".content-panel .divider");
        const optionsSection = document.querySelector(
            ".content-panel .options-container", // Updated selector to match new class
        );

        // Ensure all animations start with a small delay after page load
        setTimeout(() => {
            // Add entrance animations on page load to inner content elements
            if (mainImage) {
                mainImage.classList.add("entrance-animation", "image-visible");
            }

            // Animate inner elements instead of the container
            if (mainDescription) {
                mainDescription.classList.add("content-entrance-animation");
            }

            if (title) {
                title.classList.add("content-entrance-animation");
            }

            if (divider) {
                divider.classList.add("content-entrance-animation");
                (divider as HTMLElement).style.animationDelay = "0.2s";
            }

            if (optionsSection) {
                optionsSection.classList.add("content-entrance-animation");
                (optionsSection as HTMLElement).style.animationDelay = "0.4s";
            }

            // Add animations to navigation buttons - UPDATED for better handling
            document
                .querySelectorAll(".mobile-nav-button")
                .forEach((button, index) => {
                    // Remove initially-hidden class first to prevent conflicts
                    button.classList.remove("initially-hidden");

                    // Add animation with staggered delay
                    (button as HTMLElement).style.animationDelay =
                        `${0.3 + index * 0.1}s`;
                    button.classList.add("nav-button-animation");
                });
        }, 50); // Small delay to ensure CSS has applied

        // Rest of the event handlers
        // Handle option selection - SIMPLIFIED TO ONE EVENT HANDLER
        optionButtons.forEach((button) => {
            button.addEventListener("click", function (this: HTMLElement) {
                const optionId = this.getAttribute("data-option-id");

                // Reset active states
                resetAllActiveStates();

                // Set active state for selected option
                const selectedImage = document.getElementById(
                    `image-${optionId}`,
                );

                // Get relevant descriptions
                const desktopDesc = document.getElementById(
                    `description-${optionId}`,
                );
                const mobileDesc = document.getElementById(
                    `mobile-description-${optionId}`,
                );

                // Show image with animation first but not entrance animation
                if (selectedImage) {
                    selectedImage.classList.add("image-visible");
                    selectedImage.classList.remove("entrance-animation");
                }

                // Show descriptions with animation after a delay
                setTimeout(() => {
                    if (desktopDesc) {
                        desktopDesc.style.display = "block"; // Force display
                        desktopDesc.classList.add(
                            "description-visible",
                            "!block",
                        );
                    }

                    if (mobileDesc) {
                        mobileDesc.style.display = "block"; // Force display
                        mobileDesc.classList.add(
                            "description-visible",
                            "!block",
                        );
                        // Scroll to mobile description
                        if (window.innerWidth <= 768) {
                            setTimeout(() => {
                                // First scroll to the button to ensure context
                                this.scrollIntoView({
                                    behavior: "smooth",
                                    block: "center",
                                });

                                // Then after a short delay, scroll to show the description
                                setTimeout(() => {
                                    mobileDesc.scrollIntoView({
                                        behavior: "smooth",
                                        block: "nearest",
                                    });
                                }, 300);
                            }, 100);
                        }
                    }
                }, 600); // Delay equal to image animation duration

                // Update active button
                optionButtons.forEach((btn) => {
                    btn.classList.remove("bg-[#2e8d80]", "active-button");
                    btn.setAttribute("aria-pressed", "false");
                });

                this.classList.add("bg-[#2e8d80]", "active-button");
                this.setAttribute("aria-pressed", "true");
            });
        });

        // Helper function to reset active states
        function resetAllActiveStates() {
            document
                .querySelectorAll(
                    ".option-description, .mobile-option-description",
                )
                .forEach((desc) => {
                    desc.classList.remove("description-visible", "!block");
                    (desc as HTMLElement).style.display = "none"; // Force hide
                });

            document.querySelectorAll(`[id^="image-"]`).forEach((img) => {
                img.classList.remove("image-visible");
            });

            if (mainImage) {
                mainImage.classList.remove("image-visible");
                // Re-add the main image with default animation, not entrance
                setTimeout(() => {
                    mainImage.classList.add("image-visible");
                    mainImage.classList.remove("entrance-animation");
                }, 10);
            }
        }
    });
</script>

<style>
    /* Base styles */
    .initially-hidden {
        opacity: 0 !important;
        visibility: hidden;
    }

    /* Animation base styles */
    .option-description,
    .mobile-option-description {
        display: none;
    }

    [id^="image-"],
    #main-image {
        opacity: 0;
    }

    .content-panel h1,
    .content-panel .divider,
    #main-description,
    .content-panel .mt-auto {
        opacity: 0;
    }

    /* Animation keyframes */
    @keyframes floatUp {
        0% {
            opacity: 0;
            transform: translateY(50px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes slideRightWithFade {
        0% {
            opacity: 0;
            transform: translateX(-50px);
        }
        30% {
            opacity: 0.15;
            transform: translateX(-35px);
        }
        60% {
            opacity: 0.4;
            transform: translateX(-20px);
        }
        80% {
            opacity: 0.7;
            transform: translateX(-10px);
        }
        100% {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes slideRight {
        0% {
            opacity: 0;
            transform: translateX(-50px);
        }
        100% {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes slideDown {
        0% {
            opacity: 0;
            transform: translateY(-30px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Animation classes */
    #main-image.entrance-animation {
        opacity: 1 !important;
        animation: slideRightWithFade 1.2s ease-out forwards;
    }

    .content-entrance-animation {
        animation: slideDown 0.8s ease-out forwards;
        animation-fill-mode: forwards;
    }

    .image-visible {
        opacity: 1 !important;
        transition: opacity 0.1s ease;
    }

    .description-visible {
        display: block !important;
        animation: floatUp 0.6s ease-out forwards;
    }

    .!block {
        display: block !important;
    }

    .image-visible .image-content {
        animation: floatUp 0.6s ease-out forwards;
    }

    /* Navigation animations */
    @keyframes navButtonPulse {
        0% {
            box-shadow: 0 0 0 0 rgba(46, 141, 128, 0.7);
            opacity: 1;
        }
        70% {
            box-shadow: 0 0 0 8px rgba(46, 141, 128, 0);
            opacity: 1;
        }
        100% {
            box-shadow: 0 0 0 0 rgba(46, 141, 128, 0);
            opacity: 1;
        }
    }

    @keyframes navButtonAfterEnter {
        0% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-5px);
        }
        100% {
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 0.7;
        }
    }

    @keyframes rippleNav {
        0% {
            transform: scale(0) translate(-50%, -50%);
            opacity: 0.5;
        }
        100% {
            transform: scale(1) translate(-50%, -50%);
            opacity: 0;
        }
    }

    @keyframes navButtonEnter {
        0% {
            opacity: 0;
            transform: scale(0.5);
        }
        70% {
            transform: scale(1.1);
        }
        100% {
            opacity: 1;
            transform: scale(1);
        }
    }

    @keyframes wiggle {
        0%,
        100% {
            transform: translateX(0);
        }
        25% {
            transform: translateX(-3px);
        }
        75% {
            transform: translateX(3px);
        }
    }

    @keyframes arrowBounce {
        0%,
        100% {
            transform: translateX(0);
        }
        50% {
            transform: translateX(-3px);
        }
    }

    @keyframes arrowBounceRight {
        0%,
        100% {
            transform: translateX(0);
        }
        50% {
            transform: translateX(3px);
        }
    }

    /* Content structure styles */
    .mobile-descriptions {
        display: none;
    }

    .mobile-option-description {
        width: 100%;
        margin: 0.5rem 0 2rem;
        padding: 1rem;
        background-color: rgba(0, 0, 0, 0.5);
        border-left: 4px solid #2e8d80;
    }

    /* Active button styling */
    .active-button {
        box-shadow:
            0 0 0 2px white,
            0 0 0 4px #2e8d80;
        transform: translateY(-2px);
    }

    /* Global tag styles */
    :global(strong) {
        font-weight: 700;
        color: #2e8d80;
    }

    :global(br + br) {
        display: block;
        content: "";
        margin-top: 0.5em;
    }

    /* CLEAN CONSOLIDATED TITLE AND NAVIGATION STYLES */
    .title-nav-container {
        display: flex;
        align-items: center;
        width: 100%;
        gap: 10px;
        margin-bottom: 10px;
        justify-content: space-between;
        position: relative;
    }

    .title-nav-container h1 {
        flex: 1;
        min-width: 0;
        text-align: center;
        word-break: normal !important;
        white-space: normal;
        hyphens: manual !important;
        font-size: clamp(0.5rem, 2.5vw, 3rem) !important;
        line-height: 1.2;
        padding: 0 5px;
        max-width: 100%;
        z-index: 4;
    }

    .mobile-nav-button {
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: rgba(46, 141, 128, 0.3);
        color: white;
        transition: all 0.3s ease;
        flex-shrink: 0;
        z-index: 5;
    }

    .mobile-nav-button:hover {
        background-color: rgba(46, 141, 128, 0.9);
        transform: scale(1.15);
        box-shadow: 0 0 15px rgba(46, 141, 128, 0.5);
        animation: navButtonPulse 2s infinite;
    }

    .mobile-nav-button:active {
        transform: scale(0.9);
        transition: transform 0.1s;
    }

    .mobile-nav-button.prev {
        margin-right: 10px;
    }

    .mobile-nav-button.next {
        margin-left: 10px;
    }

    .mobile-nav-button.nav-button-animation:hover {
        animation: navButtonAfterEnter 1s ease-in-out;
    }

    .mobile-nav-button.prev:hover svg {
        animation: arrowBounce 0.8s ease-in-out infinite;
    }

    .mobile-nav-button.next:hover svg {
        animation: arrowBounceRight 0.8s ease-in-out infinite;
    }

    .mobile-nav-button::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100px;
        height: 100px;
        background-color: rgba(255, 255, 255, 0.4);
        opacity: 0;
        border-radius: 50%;
        transform: scale(0) translate(-50%, -50%);
        transform-origin: top left;
    }

    .mobile-nav-button:focus::after {
        animation: rippleNav 0.8s ease-out;
    }

    /* Unused navigation classes - hidden */
    .fixed-navigation-container,
    .nav-button,
    .mobile-nav-wrapper {
        display: none;
    }

    /* RESPONSIVE STYLES */
    @media (max-width: 768px) {
        .options-list {
            flex-direction: column;
            margin-bottom: 1rem;
        }

        .option-button {
            width: 100%;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }

        .content-panel {
            width: 100%;
            max-width: none;
            height: 100%;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }

        .description-container {
            width: 100%;
            position: relative;
        }

        .options-container {
            width: 100%;
            position: relative;
            margin-top: 1.5rem;
        }

        .mobile-descriptions {
            display: block;
            margin-bottom: 1rem;
            margin-top: 0.5rem;
            width: 100%;
        }

        .desktop-descriptions {
            display: none;
        }

        .active-button {
            border-width: 2px;
        }

        .title-nav-container h1 {
            font-size: clamp(1.1rem, 4vw, 2rem) !important;
        }

        .mobile-option-description.description-visible {
            border-left: 6px solid #2e8d80;
            background-color: rgba(46, 141, 128, 0.2);
            animation: expandDown 0.3s ease-out forwards;
        }

        @keyframes expandDown {
            from {
                opacity: 0;
                max-height: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                max-height: 1000px;
                transform: translateY(0);
            }
        }
    }

    /* Extra small screens */
    @media (max-width: 400px) {
        .title-nav-container h1 {
            font-size: clamp(0.9rem, 4vw, 1.5rem) !important;
        }

        .mobile-nav-button {
            min-width: 32px;
            height: 32px;
        }
    }
</style>
