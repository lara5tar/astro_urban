---
import { Image } from "astro:assets";

interface SlideData {
  image: ImageMetadata;
  mobileImage?: ImageMetadata;
  title?: string;
  description?: string;
}

interface Props {
  slides: SlideData[];
  interval?: number;
  showArrows?: boolean;
  showDots?: boolean;
  showText?: boolean;
}

const {
  slides,
  interval = 5000,
  showArrows = true,
  showDots = true,
  showText = true,
} = Astro.props;
---

<div class="carousel-wrapper fade-in-animation" id="carousel-wrapper ">
  <div class="carousel-container" id="carousel">
    <div class="carousel-track">
      {
        slides.map((slide, index) => (
          <div class="carousel-slide bg-white" data-index={index}>
            <div class="slide-image bg-white">
              {/* Desktop image - hidden on mobile */}
              <Image
                src={slide.image}
                alt={slide.description || `Slide ${index + 1}`}
                width={2400}
                height={1500}
                format="webp"
                class="desktop-image"
                loading={index === 0 ? "eager" : "lazy"}
                decoding={index === 0 ? "sync" : "async"}
                fetchpriority={index === 0 ? "high" : "auto"}
              />

              {/* Mobile image */}
              {slide.mobileImage && (
                <Image
                  src={slide.mobileImage}
                  alt={slide.description || `Slide ${index + 1}`}
                  width={750}
                  height={1200}
                  format="webp"
                  class="mobile-image"
                  loading={index === 0 ? "eager" : "lazy"}
                  decoding={index === 0 ? "sync" : "async"}
                  fetchpriority={index === 0 ? "high" : "auto"}
                />
              )}
            </div>
            {showText && slide.description && (
              <div class="slide-content">
                <p>{slide.description}</p>
              </div>
            )}
          </div>
        ))
      }
    </div>

    {
      showArrows && (
        <div class="carousel-arrows">
          <button class="arrow prev" aria-label="Previous slide">
            <svg viewBox="0 0 24 24" width="24" height="24">
              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" />
            </svg>
          </button>
          <button class="arrow next" aria-label="Next slide">
            <svg viewBox="0 0 24 24" width="24" height="24">
              <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z" />
            </svg>
          </button>
        </div>
      )
    }

    {
      showDots && (
        <div class="carousel-dots">
          {slides.map((_, index) => (
            <button
              class="dot"
              data-index={index}
              aria-label={`Go to slide ${index + 1}`}
            />
          ))}
        </div>
      )
    }
  </div>
</div>

<style>
  /* Animation keyframes */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in-animation {
    opacity: 0;
    animation: fadeIn 1.2s ease-out forwards;
    animation-delay: 0.2s; /* Slight delay for better effect */
  }

  .carousel-wrapper {
    position: relative;
    width: 100%;
    height: calc(100vh - 80px);
    margin-top: 80px;
    overflow: hidden;
    touch-action: pan-y; /* Prevent vertical scrolling during swipe */
  }

  .carousel-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .carousel-track {
    display: flex;
    width: 100%;
    height: 100%;
    transition: transform 0.5s ease; /* Faster transition */
  }

  .carousel-slide {
    flex: 0 0 100%;
    position: relative;
    overflow: hidden;
  }

  .slide-image {
    width: 100%;
    height: 100%;
  }

  .slide-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .slide-content {
    position: absolute;
    bottom: 8%;
    left: 0;
    right: 0;
    padding: 2rem;
    color: white;
    text-align: center;
    z-index: 10;
  }

  .slide-content p {
    margin: 0;
    font-size: clamp(1.5rem, 3vw, 2.2rem);
    font-family: "Montserrat", sans-serif;
    font-weight: 500;
    letter-spacing: 0.02em;
    max-width: 1000px;
    line-height: 1.4;
    text-shadow: 2px 2px 12px rgba(0, 0, 0, 0.8);
    padding: 1.5rem;
    margin: 0 auto;
  }

  .carousel-arrows {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
  }

  .arrow {
    width: 3rem;
    height: 3rem;
    border: none;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(4px);
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    pointer-events: auto;
  }

  .arrow:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }

  .arrow svg {
    fill: currentColor;
    width: 1.5rem;
    height: 1.5rem;
  }

  .carousel-dots {
    position: absolute;
    bottom: 1.5rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.75rem;
    z-index: 10;
  }

  .dot {
    width: 1rem;
    height: 1rem;
    border: 2px solid white;
    border-radius: 50%;
    padding: 0;
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .dot.active {
    background: white;
    transform: scale(1.2);
  }

  .desktop-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .mobile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: none;
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    .desktop-image {
      display: none;
    }

    .mobile-image {
      display: block;
    }

    .arrow {
      width: 2.5rem;
      height: 2.5rem;
    }

    .slide-content p {
      font-size: clamp(1.3rem, 2.8vw, 2rem);
      padding: 1.2rem;
    }
  }

  @media (hover: none) {
    .arrow {
      display: none;
    }
  }
</style>

<script define:vars={{ interval }}>
  document.addEventListener("DOMContentLoaded", function () {
    const carousel = document.getElementById("carousel");
    const wrapper = document.getElementById("carousel-wrapper");
    if (!carousel || !wrapper) return;

    const track = carousel.querySelector(".carousel-track");
    const slides = Array.from(carousel.querySelectorAll(".carousel-slide"));
    const dots = Array.from(carousel.querySelectorAll(".dot"));
    const prevBtn = carousel.querySelector(".arrow.prev");
    const nextBtn = carousel.querySelector(".arrow.next");

    if (!track || slides.length === 0) return;

    let currentIndex = 0;
    let autoplayTimer = null;

    // Set initial state
    updateCarousel();
    startAutoplay();

    // Run immediately to ensure correct sizing on page load
    setCarouselHeight();

    // Event listeners
    if (prevBtn) {
      prevBtn.addEventListener("click", () => {
        navigate("prev");
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener("click", () => {
        navigate("next");
      });
    }

    dots.forEach((dot, index) => {
      dot.addEventListener("click", () => {
        goToSlide(index);
      });
    });

    // Touch support
    let touchStartX = 0;
    let touchEndX = 0;

    carousel.addEventListener(
      "touchstart",
      (e) => {
        touchStartX = e.changedTouches[0].screenX;
      },
      { passive: true },
    );

    carousel.addEventListener(
      "touchend",
      (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      },
      { passive: true },
    );

    // Handle visibility change for better performance
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        stopAutoplay();
      } else {
        startAutoplay();
      }
    });

    // Pause on hover
    wrapper.addEventListener("mouseenter", stopAutoplay);
    wrapper.addEventListener("mouseleave", startAutoplay);

    // Functions
    function updateCarousel() {
      // Update slide positions
      track.style.transform = `translateX(-${currentIndex * 100}%)`;

      // Update active slide class
      slides.forEach((slide, index) => {
        slide.classList.toggle("active", index === currentIndex);
      });

      // Add animation to active slide
      animateActiveSlide();

      // Update dots
      dots.forEach((dot, index) => {
        dot.classList.toggle("active", index === currentIndex);
      });
    }

    function goToSlide(index) {
      stopAutoplay();
      currentIndex = index;
      if (currentIndex < 0) currentIndex = slides.length - 1;
      if (currentIndex >= slides.length) currentIndex = 0;
      updateCarousel();
      startAutoplay();
    }

    function navigate(direction) {
      stopAutoplay();
      if (direction === "next") {
        currentIndex++;
        if (currentIndex >= slides.length) currentIndex = 0;
      } else {
        currentIndex--;
        if (currentIndex < 0) currentIndex = slides.length - 1;
      }
      updateCarousel();
      startAutoplay();
    }

    function startAutoplay() {
      stopAutoplay();
      autoplayTimer = setInterval(() => {
        navigate("next");
      }, interval);
    }

    function stopAutoplay() {
      if (autoplayTimer) {
        clearInterval(autoplayTimer);
        autoplayTimer = null;
      }
    }

    function handleSwipe() {
      const threshold = 50; // Reduced threshold for better swipe sensitivity
      if (touchEndX < touchStartX - threshold) {
        // Swipe left
        navigate("next");
      }
      if (touchEndX > touchStartX + threshold) {
        // Swipe right
        navigate("prev");
      }
    }

    // Set correct height for mobile
    function setCarouselHeight() {
      const wrapper = document.querySelector(".carousel-wrapper");
      if (!wrapper) return;

      const viewportHeight = window.innerHeight;
      const navbarHeight = 80; // Your site's navbar height

      // Use clientHeight or a more reliable method to get actual visible area
      wrapper.style.height = `${viewportHeight - navbarHeight}px`;

      // Force browser to recalculate layout
      setTimeout(() => {
        window.scrollTo(0, 0);
      }, 50);
    }

    // Listen for various events that might change the visible area
    window.addEventListener("resize", setCarouselHeight);
    window.addEventListener("orientationchange", () => {
      setTimeout(setCarouselHeight, 300);
    });

    // Also check height when page is fully loaded (after images)
    window.addEventListener("load", setCarouselHeight);

    // Handle mobile browser address bar showing/hiding
    window.addEventListener("scroll", () => {
      // Debounce to prevent excessive calls
      clearTimeout(window.resizedFinished);
      window.resizedFinished = setTimeout(setCarouselHeight, 250);
    });

    // Additional animation for slides
    function animateActiveSlide() {
      slides.forEach((slide, index) => {
        if (index === currentIndex) {
          slide.classList.add("slide-animation");
        } else {
          slide.classList.remove("slide-animation");
        }
      });
    }
  });
</script>
