---
import GeneralLayout from "../layouts/GeneralLayout.astro";
import { Image } from "astro:assets";
import { API_CONFIG } from "../config/api.js";

// Remover la línea de prerender para volver a generación estática
// export const prerender = false; // REMOVIDO

// Para la generación estática, mostraremos un estado inicial vacío
// y cargaremos las propiedades dinámicamente desde el cliente
const properties = []; // Array vacío para generación estática
const initialMeta = { current_page: 1, last_page: 1 };
const hasMorePages = false;
---

<GeneralLayout title="Inmobiliaria - Urban Real Estate" image="/icono.png">
    <!-- Grid de propiedades -->
    <div class="block">
        <!-- Indicador de carga inicial -->
        <div id="initial-loading" class="w-full">
            <div class="flex flex-col items-center justify-center py-16">
                <div
                    class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-[#2e8d80] mb-4"
                >
                </div>
                <p class="text-gray-600 font-montserrat">
                    Cargando propiedades...
                </p>
            </div>
        </div>

        <!-- Grid que se llenará dinámicamente -->
        <div
            id="properties-grid"
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-0 hidden"
        >
            <!-- Las propiedades se cargarán aquí dinámicamente -->
        </div>

        <!-- Mensaje cuando no hay propiedades -->
        <div id="no-properties" class="text-center py-16 hidden">
            <div class="bg-white rounded-xl p-8 shadow-md max-w-2xl mx-auto">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">
                    No hay propiedades disponibles
                </h2>
                <p class="text-gray-600 mb-6">
                    Actualmente no tenemos propiedades para mostrar. ¡Vuelve
                    pronto!
                </p>
                <a
                    href="/"
                    class="inline-flex items-center px-4 py-2 bg-[#2e8d80] text-white rounded-md hover:bg-[#267569] transition-colors"
                >
                    Volver al inicio
                </a>
            </div>
        </div>

        <!-- Indicador de carga para lazy loading -->
        <div id="loading-indicator" class="text-center py-8 hidden">
            <div
                class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-[#2e8d80]"
            >
            </div>
            <p class="mt-2 text-gray-600 font-montserrat">
                Cargando más propiedades...
            </p>
        </div>

        <!-- Indicador de fin de resultados -->
        <div id="end-of-results" class="text-center py-8 hidden">
            <p class="text-gray-600 font-montserrat">
                No hay más propiedades disponibles
            </p>
        </div>
    </div>

    <script define:vars={{ apiBaseUrl: API_CONFIG.BASE_URL }}>
        // Cargar propiedades dinámicamente desde el cliente
        document.addEventListener("DOMContentLoaded", () => {
            const propertiesGrid = document.getElementById("properties-grid");
            const initialLoading = document.getElementById("initial-loading");
            const loadingIndicator =
                document.getElementById("loading-indicator");
            const endOfResults = document.getElementById("end-of-results");
            const noProperties = document.getElementById("no-properties");

            // Variables para el lazy loading
            let currentPage = 1;
            let isLoading = false;
            let noMorePages = false;

            // Función para obtener propiedades desde la API
            async function fetchProperties(page = 1) {
                try {
                    const cacheBuster = new Date().getTime();
                    const apiUrl = `${apiBaseUrl}properties?page=${page}&_t=${cacheBuster}`;

                    console.log(`Fetching properties from: ${apiUrl}`);

                    const response = await fetch(apiUrl, {
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                            "Cache-Control":
                                "no-cache, no-store, must-revalidate",
                            Pragma: "no-cache",
                        },
                        cache: "no-store",
                    });

                    if (!response.ok) {
                        throw new Error(
                            `HTTP error! status: ${response.status}`,
                        );
                    }

                    const data = await response.json();
                    console.log(
                        `Fetched ${data?.data?.length || 0} properties`,
                    );

                    if (data && data.data && Array.isArray(data.data)) {
                        return {
                            properties: data.data.map((property) => ({
                                id: property.id,
                                imageUrl:
                                    property.images &&
                                    property.images.length > 0
                                        ? property.images[0]
                                        : "https://placehold.co/800x800/222/fff?text=Imagen+no+disponible",
                                location: property.location
                                    ? property.location.line2
                                    : "Ubicación no disponible",
                                type: property.type,
                                fullData: property,
                            })),
                            meta: data.meta || {},
                            hasMorePages:
                                data.meta?.current_page < data.meta?.last_page,
                        };
                    }
                    return { properties: [], meta: {}, hasMorePages: false };
                } catch (error) {
                    console.error("Error fetching properties:", error);
                    return { properties: [], meta: {}, hasMorePages: false };
                }
            }

            // Función para renderizar propiedades en el grid
            function renderProperties(properties, append = false) {
                if (!append) {
                    propertiesGrid.innerHTML = "";
                }

                properties.forEach((property, index) => {
                    const globalIndex = append
                        ? document.querySelectorAll(".grid-item").length
                        : index;
                    const propertyElement = document.createElement("div");
                    propertyElement.className = "relative grid-item";
                    propertyElement.dataset.index = globalIndex.toString();

                    propertyElement.innerHTML = `
                        <a href="/inmobiliaria/propiedad?id=${property.id}" class="block">
                            <img
                                src="${property.imageUrl}"
                                alt="${property.type} - ${property.location}"
                                class="w-full aspect-square object-cover transition-transform duration-300 ease-in-out hover:scale-105"
                                loading="${index < 6 ? "eager" : "lazy"}"
                                width="800"
                                height="800"
                            />
                            <div class="absolute inset-0 flex flex-col justify-center items-center bg-black/30 hover:bg-black/50 transition-colors duration-300">
                                <div class="font-montserrat font-bold text-lg md:text-xl lg:text-2xl tracking-widest py-2 px-4 bg-black/40 uppercase text-center inline-block min-w-[150px] max-w-[90%] mx-auto border border-white/50 text-white">
                                    ${property.location}
                                </div>
                            </div>
                        </a>
                    `;

                    propertiesGrid.appendChild(propertyElement);
                });

                // Animar nuevos elementos
                setTimeout(animateItems, 100);
            }

            // Función para cargar más propiedades
            async function loadMoreProperties() {
                if (isLoading || noMorePages) return;

                isLoading = true;
                loadingIndicator.classList.remove("hidden");

                try {
                    const nextPage = currentPage + 1;
                    const result = await fetchProperties(nextPage);

                    if (result.properties && result.properties.length > 0) {
                        currentPage = nextPage;
                        renderProperties(result.properties, true);
                        noMorePages = !result.hasMorePages;
                    } else {
                        noMorePages = true;
                    }
                } catch (error) {
                    console.error("Error loading more properties:", error);
                } finally {
                    isLoading = false;
                    loadingIndicator.classList.add("hidden");

                    if (noMorePages) {
                        endOfResults.classList.remove("hidden");
                    }
                }
            }

            // Función de animación
            function animateItems() {
                document
                    .querySelectorAll(".grid-item:not(.animated)")
                    .forEach((item) => {
                        if (isApproachingViewport(item)) {
                            const index = parseInt(item.dataset.index ?? "0");
                            const delay = (index % 12) * 70;
                            setTimeout(() => {
                                item.classList.add("animated");
                            }, delay);
                        }
                    });
            }

            function isApproachingViewport(element) {
                const rect = element.getBoundingClientRect();
                const windowHeight =
                    window.innerHeight || document.documentElement.clientHeight;
                return rect.top <= windowHeight * 1.5;
            }

            // Función para verificar si necesitamos cargar más propiedades
            function checkForLoadMore() {
                if (isLoading || noMorePages) return;

                const scrollPosition = window.scrollY + window.innerHeight;
                const pageHeight = document.body.scrollHeight;
                const threshold = 200;

                if (pageHeight - scrollPosition < threshold) {
                    loadMoreProperties();
                }
            }

            // Cargar propiedades iniciales
            async function loadInitialProperties() {
                try {
                    initialLoading.classList.remove("hidden");
                    const result = await fetchProperties(1);

                    if (result.properties && result.properties.length > 0) {
                        currentPage = 1;
                        noMorePages = !result.hasMorePages;

                        renderProperties(result.properties);

                        // Mostrar el grid y ocultar el loading
                        initialLoading.classList.add("hidden");
                        propertiesGrid.classList.remove("hidden");

                        // Configurar event listeners
                        window.addEventListener("scroll", () => {
                            animateItems();
                            checkForLoadMore();
                        });

                        // Activar animaciones iniciales
                        setTimeout(animateItems, 300);
                        setTimeout(checkForLoadMore, 1000);
                    } else {
                        // No hay propiedades
                        initialLoading.classList.add("hidden");
                        noProperties.classList.remove("hidden");
                    }
                } catch (error) {
                    console.error("Error loading initial properties:", error);
                    initialLoading.classList.add("hidden");
                    noProperties.classList.remove("hidden");
                }
            }

            // Iniciar carga de propiedades
            loadInitialProperties();
        });
    </script>

    <style>
        .grid-item {
            overflow: hidden;
            position: relative;
            opacity: 0;
            transform: translateY(30px);
            transition:
                opacity 0.4s ease,
                transform 0.4s ease;
        }

        .grid-item.animated {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</GeneralLayout>
