---
import "../tailwind.css";
import Conexion from "./DiagramaConexion.astro";
import Decision from "./DiagramaConexionDesicion.astro";
import DiagramaPregunta from "./DiagramaPregunta.astro";
import DiagramaRespuesta from "./DiagramaRespuesta.astro";
import DiagramaSiNo from "./DiagramaSiNo.astro";
import Titulo from "./DiagramaTitulo.astro";
import TituloSeccion from "./TituloSeccion.astro";

// This function won't work client-side when passed directly
// Instead we'll use actionUrl prop or detect the button by its text
const miFuncion = () => {
    //mandar a pagina contact
    console.log("mandar a pagina contact");

    window.location.href = "/contact";
};
---

<section id="flowchart-section" class="bg-white columns-auto py-10">
    <div class="px-10 animate-item">
        <TituloSeccion titulo="Proceso de Construcción" />
    </div>

    <div class="animate-item"><Titulo titulo="QUIERO CONSTRUIR" /></div>

    <div class="animate-item"><Conexion /></div>

    <div class="animate-item">
        <DiagramaPregunta pregunta="¿TENGO TERRENO?" />
    </div>

    <div class="animate-item"><Conexion /></div>
    <div class="animate-item"><Decision invertido={true} /></div>

    <div class="animate-item"><DiagramaSiNo /></div>

    <div class="flex justify-around animate-item">
        <Conexion />
        <Conexion />
    </div>

    <div class="flex justify-around animate-item">
        <div class="w-[48%] flex justify-center max-w-[30%]">
            <div class="h-100% w-1 bg-[#2e8d80]"></div>
        </div>
        <DiagramaRespuesta respuesta="TE LO CONSEGUIMOS" />
    </div>

    <div class="animate-item"><Decision /></div>

    <div class="animate-item"><Conexion /></div>

    <div class="flex justify-around animate-item">
        <DiagramaRespuesta respuesta="DISEÑO DEL PROYECTO" />
    </div>

    <div class="animate-item"><Conexion /></div>

    <div class="animate-item">
        <DiagramaPregunta pregunta="¿CUENTO CON CAPITAL PARA CONSTRUIR?" />
    </div>

    <div class="animate-item"><Conexion /></div>
    <div class="animate-item"><Decision invertido={true} /></div>

    <div class="animate-item"><DiagramaSiNo /></div>

    <div class="flex justify-around animate-item">
        <Conexion />
        <Conexion />
    </div>

    <div class="flex justify-around animate-item">
        <div class="w-[48%] flex justify-center max-w-[30%]">
            <div class="h-100% w-1 bg-[#2e8d80]"></div>
        </div>
        <DiagramaRespuesta respuesta="TRAMITAMOS TU CRÉDITO HIPOTECARIO" />
    </div>

    <div class="animate-item"><Decision /></div>

    <div class="animate-item"><Conexion /></div>

    <!-- Replace the function with an actionUrl -->
    <div class="animate-item">
        <Titulo titulo="INICIA TU OBRA" actionUrl="/contact" />
    </div>

    <div class="h-10"></div>

    <!-- Call to Action -->
    <div class="text-center px-10 animate-item">
        <p class="text-xl text-gray-700 mb-6 font-lato">
            Estamos preparados para acompañarte en cada etapa de tu proyecto de
            construcción, sin importar tu punto de partida.
        </p>
    </div>
</section>

<style>
    .animate-item {
        opacity: 0;
        transform: translateY(10px); /* Even more subtle effect */
        transition:
            opacity 0.3s ease-out,
            /* Even faster transition */ transform 0.3s ease-out;
    }

    .animate-item.show {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const section = document.getElementById("flowchart-section");
        const animatedElements = document.querySelectorAll(".animate-item");

        if (section) {
            // Create intersection observer for the entire section
            const sectionObserver = new IntersectionObserver(
                (entries) => {
                    if (entries[0].isIntersecting) {
                        // When section is in view, animate all elements with short staggered delay
                        animatedElements.forEach((element, index) => {
                            setTimeout(() => {
                                element.classList.add("show");
                            }, 70 * index); // Use just 50ms between animations for faster sequence
                        });

                        // Stop observing after triggering animations
                        sectionObserver.unobserve(section);
                    }
                },
                {
                    root: null,
                    rootMargin: "0px", // Trigger as soon as section enters viewport
                    threshold: 0.05, // Trigger when just 5% of the section is visible
                },
            );

            // Start observing the section
            sectionObserver.observe(section);
        }
    });
</script>
