---
import GeneralLayout from "../layouts/GeneralLayout.astro";
import HeroSeccion from "../components/HeroSeccion.astro";
import { API_CONFIG } from "../config/api.js";

// Configuración básica para la API
const apiBaseUrl = API_CONFIG.BASE_URL;

// Definición de tipos para los artículos
interface ArticleImage {
    id: number;
    url: string;
    display_order: number;
}

interface Article {
    id: number;
    title: string;
    slug: string;
    description: string;
    publication_date: string;
    publication_date_formatted: string;
    meta_title: string;
    meta_description: string;
    keywords: string[];
    images: ArticleImage[];
    featured_image: string;
    created_at: string;
    updated_at: string;
    content_preview: string;
    content?: Array<{ type: string; content: string }>;
    content_html?: string;
    comments?: Array<{
        id: number;
        author_name: string | null;
        author_email: string | null;
        content: string | null;
        created_at: string;
        created_at_formatted: string;
    }>;
}

// Configuración de paginación
// La API ya maneja la paginación internamente

// Función para obtener los artículos del blog desde la API
async function getArticles(page = 1) {
    try {
        const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.ARTICLES}?page=${page}`;
        console.log("Fetching articles from (server):", url);

        const response = await fetch(url);

        if (!response.ok) {
            throw new Error(
                `Error de API: ${response.status} ${response.statusText}`,
            );
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Error fetching articles:", error);
        return {
            success: false,
            data: [],
            meta: {
                current_page: 1,
                last_page: 1,
                per_page: 10,
                total: 0,
            },
            links: {
                first: null,
                last: null,
                prev: null,
                next: null,
            },
        };
    }
}

// Obtener el número de página actual desde los parámetros de URL
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get("page") || "1");

// Obtener los artículos y la información de paginación de la API
const apiResponse = await getArticles(currentPage);
const articles = apiResponse.data || [];
const meta = apiResponse.meta || {
    current_page: 1,
    last_page: 1,
    per_page: 10,
    total: 0,
};
const links = apiResponse.links || {
    first: null,
    last: null,
    prev: null,
    next: null,
};

// Función para generar URL de paginación
function getPageUrl(pageNum: number): string {
    const newUrl = new URL(Astro.request.url);
    if (pageNum === 1) {
        newUrl.searchParams.delete("page");
    } else {
        newUrl.searchParams.set("page", pageNum.toString());
    }
    return newUrl.pathname + newUrl.search;
}
---

<GeneralLayout
    title="Blog | Urban Arquitectura"
    description="Artículos y noticias sobre el sector inmobiliario, arquitectura y construcción"
>
    <HeroSeccion
        title="Nuestro Blog"
        subtitle="Descubre las últimas tendencias y consejos sobre bienes raíces, construcción y arquitectura"
    />

    <section class="py-12 md:py-16 px-4 bg-gray-50">
        <!-- Contenedor del blog con control de paginación basado en cliente -->
        <div
            id="blog-container"
            class="container mx-auto max-w-6xl px-4 sm:px-6 lg:px-8"
        >
            <!-- Indicador de carga -->
            <div id="loading-indicator" class="w-full hidden">
                <div class="flex flex-col items-center justify-center py-12">
                    <div
                        class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary mb-4"
                    >
                    </div>
                    <p class="text-gray-600">Cargando artículos...</p>
                </div>
            </div>

            <!-- Mensaje cuando no hay artículos -->
            <div id="no-articles-message" class="py-16 text-center hidden">
                <div
                    class="bg-white rounded-xl p-8 shadow-md max-w-2xl mx-auto"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-16 w-16 text-gray-300 mx-auto mb-4"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                        ></path>
                    </svg>
                    <h2
                        class="text-2xl font-bold text-gray-800 mb-2 font-poppins"
                    >
                        No hay artículos disponibles
                    </h2>
                    <p class="text-gray-600 mb-6">
                        Estamos trabajando en nuevos contenidos para nuestro
                        blog. ¡Vuelve pronto para ver nuestros artículos!
                    </p>
                    <a
                        href="/"
                        class="inline-flex items-center px-4 py-2 bg-[#2e8d80] text-white rounded-md hover:bg-[#267569] transition-colors"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5 mr-2"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M3 12l2-2m0 0l7-7 7 7m-7-7v14"></path>
                        </svg>
                        Volver al inicio
                    </a>
                </div>
            </div>

            <!-- Listado de artículos -->
            <div
                id="articles-grid"
                class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 mb-8"
            >
                <!-- Los artículos se cargarán aquí dinámicamente -->
            </div>

            <!-- Paginación con diseño mejorado para móviles -->
            <div id="pagination-controls" class="mt-8 md:mt-12 hidden">
                <div class="flex flex-wrap justify-center items-center gap-2">
                    <button
                        id="prev-page-button"
                        class="inline-flex items-center px-3 py-2 sm:px-4 sm:py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4 mr-1 sm:mr-2"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M15 19l-7-7 7-7"></path>
                        </svg>
                        <span>Anterior</span>
                    </button>

                    <div
                        id="page-numbers"
                        class="flex flex-wrap justify-center space-x-1 sm:space-x-2"
                    >
                        <!-- Los números de página se cargarán aquí dinámicamente -->
                    </div>

                    <button
                        id="next-page-button"
                        class="inline-flex items-center px-3 py-2 sm:px-4 sm:py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled
                    >
                        <span>Siguiente</span>
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4 ml-1 sm:ml-2"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </section>
</GeneralLayout>

<script define:vars={{ apiBaseUrl: API_CONFIG.BASE_URL }}>
    // Variables globales
    let currentPage = 1;
    let totalPages = 1;
    let isLoading = false;
    let errorMessage = null;

    document.addEventListener("DOMContentLoaded", () => {
        // Referencias a elementos del DOM
        const articlesGrid = document.getElementById("articles-grid");
        const loadingIndicator = document.getElementById("loading-indicator");
        const noArticlesMessage = document.getElementById(
            "no-articles-message",
        );
        const paginationControls = document.getElementById(
            "pagination-controls",
        );
        const prevPageButton = document.getElementById("prev-page-button");
        const nextPageButton = document.getElementById("next-page-button");
        const pageNumbers = document.getElementById("page-numbers");

        // Inicializar con datos de la URL
        const urlParams = new URLSearchParams(window.location.search);
        const pageParam = urlParams.get("page");

        // Cargar los artículos iniciales
        fetchArticles(pageParam ? parseInt(pageParam) : 1);

        // Eventos para los botones de paginación
        if (prevPageButton) {
            prevPageButton.addEventListener("click", () => {
                if (currentPage > 1) {
                    fetchArticles(currentPage - 1);
                }
            });
        }

        if (nextPageButton) {
            nextPageButton.addEventListener("click", () => {
                if (currentPage < totalPages) {
                    fetchArticles(currentPage + 1);
                }
            });
        }

        // Función principal para obtener artículos
        function fetchArticles(page) {
            // Resetear elementos UI
            isLoading = true;
            if (loadingIndicator) loadingIndicator.classList.remove("hidden");
            if (articlesGrid) articlesGrid.classList.add("hidden");
            if (noArticlesMessage) noArticlesMessage.classList.add("hidden");
            if (paginationControls) paginationControls.classList.add("hidden");
            if (articlesGrid) articlesGrid.innerHTML = "";

            // Actualizar la URL del navegador
            const browserUrl = new URL(window.location.href);
            if (page === 1) {
                browserUrl.searchParams.delete("page");
            } else {
                browserUrl.searchParams.set("page", page.toString());
            }
            window.history.pushState({}, "", browserUrl.toString());

            // Construir URL de la API - Usamos directamente la URL base que pasamos desde el componente
            const apiUrl = `${apiBaseUrl}articles?page=${page}`;

            console.log("Fetching articles from:", apiUrl);

            // Realizar la petición a la API
            fetch(apiUrl)
                .then((response) => {
                    if (!response.ok) {
                        throw new Error(`Error de API: ${response.status}`);
                    }
                    return response.json();
                })
                .then((result) => {
                    if (result.success && result.data) {
                        // Actualizar datos
                        const articles = result.data;
                        totalPages = result.meta.last_page;
                        currentPage = result.meta.current_page;

                        // Renderizar artículos
                        renderArticles(articles);

                        // Actualizar paginación
                        renderPagination();

                        // Desplazarse al inicio
                        window.scrollTo({
                            top: 0,
                            behavior: "smooth",
                        });
                    } else {
                        showNoArticles();
                    }
                })
                .catch((error) => {
                    console.error("Error al cargar artículos:", error);
                    showNoArticles();
                })
                .finally(() => {
                    isLoading = false;
                    if (loadingIndicator)
                        loadingIndicator.classList.add("hidden");
                });
        }

        // Renderizar artículos en la cuadrícula
        function renderArticles(articles) {
            if (!articlesGrid) return;

            if (articles.length === 0) {
                showNoArticles();
                return;
            }

            articlesGrid.innerHTML = "";

            articles.forEach((article) => {
                const articleElement = createArticleElement(article);
                articlesGrid.appendChild(articleElement);
            });

            articlesGrid.classList.remove("hidden");

            if (paginationControls && totalPages > 1) {
                paginationControls.classList.remove("hidden");
            }
        }

        // Crear elemento HTML para un artículo
        function createArticleElement(article) {
            const articleCard = document.createElement("div");
            articleCard.className =
                "bg-white rounded-xl overflow-hidden shadow-sm border border-gray-100 hover:shadow-md transition-all duration-300 hover:translate-y-[-5px] flex flex-col h-full";

            // Imagen destacada con altura optimizada para móviles
            const imageContainer = document.createElement("div");
            imageContainer.className = "h-48 sm:h-56 overflow-hidden relative";

            const image = document.createElement("img");
            image.src = article.featured_image;
            image.alt = article.title;
            image.className =
                "w-full h-full object-cover transition-transform hover:scale-105 duration-500";
            image.loading = "lazy"; // Mejora rendimiento

            // Añadir gradiente sutil sobre la imagen
            const overlay = document.createElement("div");
            overlay.className =
                "absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-70";

            imageContainer.appendChild(image);
            imageContainer.appendChild(overlay);
            articleCard.appendChild(imageContainer);

            // Contenido con padding ajustado para móviles
            const contentDiv = document.createElement("div");
            contentDiv.className = "p-4 sm:p-6 flex-grow flex flex-col";

            // Metadata (fecha) con tamaño optimizado
            const metaDiv = document.createElement("div");
            metaDiv.className = "flex items-center mb-2 sm:mb-3";

            const dateSpan = document.createElement("div");
            dateSpan.className = "flex items-center text-xs text-gray-500";

            // Icono de calendario
            const calendarIcon = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "svg",
            );
            calendarIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            calendarIcon.setAttribute("class", "h-3.5 w-3.5 mr-1");
            calendarIcon.setAttribute("fill", "none");
            calendarIcon.setAttribute("viewBox", "0 0 24 24");
            calendarIcon.setAttribute("stroke", "currentColor");

            const calendarPath = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "path",
            );
            calendarPath.setAttribute("stroke-linecap", "round");
            calendarPath.setAttribute("stroke-linejoin", "round");
            calendarPath.setAttribute("stroke-width", "2");
            calendarPath.setAttribute(
                "d",
                "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z",
            );

            calendarIcon.appendChild(calendarPath);
            dateSpan.appendChild(calendarIcon);

            const dateText = document.createElement("span");
            dateText.textContent = article.publication_date_formatted;
            dateSpan.appendChild(dateText);

            metaDiv.appendChild(dateSpan);
            contentDiv.appendChild(metaDiv);

            // Título con tamaños responsivos
            const title = document.createElement("h3");
            title.className =
                "text-lg sm:text-xl font-bold mb-2 sm:mb-3 text-gray-800 font-poppins line-clamp-2 hover:text-primary transition-colors";
            title.textContent = article.title;
            contentDiv.appendChild(title);

            // Descripción con tamaño de texto mejorado
            const description = document.createElement("p");
            description.className =
                "text-gray-600 mb-4 sm:mb-5 text-sm leading-relaxed line-clamp-3 flex-grow";
            description.textContent =
                article.description || "Sin descripción disponible";
            contentDiv.appendChild(description);

            // Miniaturas de imágenes optimizadas para móvil (si existen)
            if (article.images && article.images.length > 1) {
                const imagesContainer = document.createElement("div");
                imagesContainer.className =
                    "flex gap-1.5 mb-3 sm:mb-4 overflow-x-auto pb-1 scrollbar-hide";

                article.images.slice(0, 4).forEach((image, index) => {
                    const imgContainer = document.createElement("div");
                    imgContainer.className =
                        "flex-shrink-0 w-12 h-12 sm:w-14 sm:h-14 rounded-lg overflow-hidden border border-gray-100 hover:border-primary transition-colors";

                    const img = document.createElement("img");
                    img.src = image.url;
                    img.alt = `${article.title} - imagen ${index + 1}`;
                    img.className = "w-full h-full object-cover";
                    img.loading = "lazy";

                    imgContainer.appendChild(img);
                    imagesContainer.appendChild(imgContainer);
                });

                // Contador de imágenes adicionales
                if (article.images.length > 4) {
                    const counter = document.createElement("div");
                    counter.className =
                        "flex-shrink-0 w-12 h-12 sm:w-14 sm:h-14 rounded-lg overflow-hidden bg-gray-100 flex items-center justify-center text-gray-600 text-xs font-medium";
                    counter.textContent = `+${article.images.length - 4}`;
                    imagesContainer.appendChild(counter);
                }

                contentDiv.appendChild(imagesContainer);
            }

            // Footer con etiquetas y botón de leer más - mejor espacio para tocar
            const footerDiv = document.createElement("div");
            footerDiv.className =
                "mt-auto pt-3 sm:pt-4 flex flex-wrap items-center justify-between border-t border-gray-100";

            // Crear un div espaciador para mantener el layout
            const spacerDiv = document.createElement("div");
            spacerDiv.className = "flex-grow";
            footerDiv.appendChild(spacerDiv);

            // Enlace "Leer más" con área de toque mejorada
            const link = document.createElement("a");
            link.href = `/blog/${article.id}`;
            link.className =
                "inline-flex items-center text-primary text-sm font-medium hover:text-primary/80 transition-colors py-1 px-1";
            link.textContent = "Leer más";

            const svg = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "svg",
            );
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            svg.setAttribute("class", "h-4 w-4 ml-1");
            svg.setAttribute("fill", "none");
            svg.setAttribute("viewBox", "0 0 24 24");
            svg.setAttribute("stroke", "currentColor");

            const path = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "path",
            );
            path.setAttribute("stroke-linecap", "round");
            path.setAttribute("stroke-linejoin", "round");
            path.setAttribute("stroke-width", "2");
            path.setAttribute("d", "M14 5l7 7m0 0l-7 7m7-7H3");

            svg.appendChild(path);
            link.appendChild(svg);
            footerDiv.appendChild(link);

            contentDiv.appendChild(footerDiv);
            articleCard.appendChild(contentDiv);

            return articleCard;
        }

        // Renderizar controles de paginación
        function renderPagination() {
            if (!pageNumbers || !prevPageButton || !nextPageButton) return;

            // Limpiar números de página existentes
            pageNumbers.innerHTML = "";

            // Actualizar botones Anterior/Siguiente
            prevPageButton.disabled = currentPage <= 1;
            nextPageButton.disabled = currentPage >= totalPages;

            // En dispositivos móviles, mostrar menos números de página
            const isMobile = window.innerWidth < 640;
            // Cuántos números mostrar a cada lado
            const visiblePageNumbers = isMobile ? 0 : 1;

            for (let i = 1; i <= totalPages; i++) {
                // Mostrar siempre primera página, última página y páginas cercanas a la actual
                const shouldShow =
                    i === 1 ||
                    i === totalPages ||
                    Math.abs(i - currentPage) < visiblePageNumbers + 1;

                const isLeftEllipsis =
                    i === 2 && currentPage > visiblePageNumbers + 2;
                const isRightEllipsis =
                    i === totalPages - 1 &&
                    currentPage < totalPages - visiblePageNumbers - 1;

                if (isLeftEllipsis || isRightEllipsis) {
                    // Mostrar puntos suspensivos
                    const ellipsis = document.createElement("span");
                    ellipsis.className =
                        "px-2 py-1 sm:px-3 sm:py-2 text-gray-500";
                    ellipsis.textContent = "...";
                    pageNumbers.appendChild(ellipsis);
                } else if (shouldShow) {
                    // Mostrar número de página con tamaño optimizado para móvil
                    const pageButton = document.createElement("a");
                    pageButton.href = "#";
                    pageButton.className = `inline-flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full text-sm font-medium ${
                        i === currentPage
                            ? "bg-[#2e8d80] text-white"
                            : "bg-white border border-gray-300 text-gray-700 hover:bg-gray-50"
                    } transition-colors`;
                    pageButton.textContent = i.toString();

                    // Ampliar el área táctil para móviles
                    pageButton.style.minWidth = isMobile ? "32px" : "40px";
                    pageButton.style.minHeight = isMobile ? "32px" : "40px";

                    // Evento al hacer clic
                    pageButton.addEventListener("click", (e) => {
                        e.preventDefault();
                        fetchArticles(i);
                    });

                    pageNumbers.appendChild(pageButton);
                }
            }
        }

        // Mostrar mensaje de "No hay artículos"
        function showNoArticles() {
            if (articlesGrid) articlesGrid.classList.add("hidden");
            if (paginationControls) paginationControls.classList.add("hidden");
            if (noArticlesMessage) noArticlesMessage.classList.remove("hidden");
        }
    });
</script>

<style>
    /* Definir el color primario para los enlaces y elementos destacados */
    :root {
        --color-primary: #2e8d80;
    }

    .text-primary {
        color: var(--color-primary);
    }

    /* Limitar el número de líneas visibles en los títulos y descripciones */
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
