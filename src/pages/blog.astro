---
import GeneralLayout from "../layouts/GeneralLayout.astro";
import { Image } from "astro:assets";
import HeroSeccion from "../components/HeroSeccion.astro";
import { API_CONFIG } from "../config/api.js";

// Configuración de prerenderizado
export const prerender = false;

// Definición de tipos para los artículos
interface ArticleImage {
    id: number;
    url: string;
    display_order: number;
}

interface Article {
    id: number;
    title: string;
    slug: string;
    description: string;
    publication_date: string;
    publication_date_formatted: string;
    meta_title: string;
    meta_description: string;
    keywords: string[];
    images: ArticleImage[];
    featured_image: string;
    created_at: string;
    updated_at: string;
    content_preview: string;
    content?: Array<{ type: string; content: string }>;
    content_html?: string;
    comments?: Array<{
        id: number;
        author_name: string | null;
        author_email: string | null;
        content: string | null;
        created_at: string;
        created_at_formatted: string;
    }>;
}

// Configuración de paginación
// La API ya maneja la paginación internamente

// Función para obtener los artículos del blog desde la API
async function getArticles(page = 1) {
    try {
        const response = await fetch(
            `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.ARTICLES}?page=${page}`,
        );
        const data = await response.json();
        
        return data;
    } catch (error) {
        console.error("Error fetching articles:", error);
        return {
            success: false,
            data: [],
            meta: {
                current_page: 1,
                last_page: 1,
                per_page: 10,
                total: 0
            },
            links: {
                first: null,
                last: null,
                prev: null,
                next: null
            }
        };
    }
}

// Obtener el número de página actual desde los parámetros de URL
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get('page') || '1');

// Obtener los artículos y la información de paginación de la API
const apiResponse = await getArticles(currentPage);
const articles = apiResponse.data || [];
const meta = apiResponse.meta || {
    current_page: 1,
    last_page: 1,
    per_page: 10,
    total: 0
};
const links = apiResponse.links || {
    first: null,
    last: null,
    prev: null,
    next: null
};

// Función para generar URL de paginación
function getPageUrl(pageNum: number): string {
    const newUrl = new URL(Astro.request.url);
    if (pageNum === 1) {
        newUrl.searchParams.delete('page');
    } else {
        newUrl.searchParams.set('page', pageNum.toString());
    }
    return newUrl.pathname + newUrl.search;
}
---

<GeneralLayout
    title="Blog | Urban Arquitectura"
    description="Artículos y noticias sobre el sector inmobiliario, arquitectura y construcción"
>
    <HeroSeccion
        title="Nuestro Blog"
        subtitle="Descubre las últimas tendencias y consejos sobre bienes raíces, construcción y arquitectura"
    />

    <section class="py-12 px-4 bg-gray-100">
        <div class="container mx-auto max-w-6xl">
            {articles.length > 0 ? (
                <>
                    <!-- Lista de artículos -->
                    <div>
                        {/* <h2
                            class="text-3xl font-bold mb-8 text-gray-800 font-poppins text-center"
                        >
                            Artículos Recientes
                        </h2> */}
                        <div
                            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
                        >
                            {
                                articles.map((article: Article) => (
                                    <div class="bg-white rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-transform hover:translate-y-[-5px] duration-300">
                                        <div class="h-48 overflow-hidden">
                                            <img
                                                src={article.featured_image}
                                                alt={article.title}
                                                class="w-full h-full object-cover transition-transform hover:scale-105 duration-500"
                                            />
                                        </div>
                                        <div class="p-6">
                                            <div class="flex items-center mb-2">
                                                <span class="text-xs text-gray-500">
                                                    {article.publication_date_formatted}
                                                </span>
                                                <span class="mx-2">•</span>
                                                <span class="text-xs text-primary">
                                                    Inmobiliaria
                                                </span>
                                            </div>
                                            <h3 class="text-xl font-bold mb-2 text-gray-800 font-poppins line-clamp-2">
                                                {article.title}
                                            </h3>
                                            
                                            {/* Galería de miniaturas de imágenes */}
                                            {article.images && article.images.length > 1 && (
                                                <div class="flex gap-1 mb-3 overflow-x-auto pb-2">
                                                    {article.images.slice(0, 4).map((image, index) => (
                                                        <div class="flex-shrink-0 w-12 h-12 rounded overflow-hidden border border-gray-200">
                                                            <img 
                                                                src={image.url} 
                                                                alt={`${article.title} - imagen ${index + 1}`}
                                                                class="w-full h-full object-cover"
                                                                loading="lazy"
                                                            />
                                                        </div>
                                                    ))}
                                                    {article.images.length > 4 && (
                                                        <div class="flex-shrink-0 w-12 h-12 rounded overflow-hidden bg-gray-800 flex items-center justify-center text-white text-xs">
                                                            +{article.images.length - 4}
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                            
                                            <p class="text-gray-600 mb-4 text-sm line-clamp-3">
                                                {article.description}
                                            </p>
                                            <div class="mt-4 flex flex-wrap gap-2">
                                                {article.keywords
                                                    .slice(0, 3)
                                                    .map((keyword: string) => (
                                                        <span class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">
                                                            {keyword}
                                                        </span>
                                                    ))}
                                            </div>
                                            <div class="mt-4">
                                                <a
                                                    href={`/blog/${article.id}`}
                                                    class="inline-flex items-center text-primary text-sm font-medium hover:underline"
                                                >
                                                    Leer más
                                                    <svg
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        class="h-4 w-4 ml-1"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        stroke="currentColor"
                                                    >
                                                        <path
                                                            stroke-linecap="round"
                                                            stroke-linejoin="round"
                                                            stroke-width="2"
                                                            d="M14 5l7 7m0 0l-7 7m7-7H3"
                                                        />
                                                    </svg>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                ))
                            }
                        </div>
                    </div>

                    <!-- Paginación -->
                    <div class="mt-12">
                        <div class="flex justify-center items-center gap-2">
                            {/* Botón Anterior - siempre visible pero deshabilitado si es la primera página */}
                            <a
                                href={meta.current_page > 1 ? getPageUrl(meta.current_page - 1) : '#'}
                                class={`inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium ${
                                    meta.current_page > 1 
                                        ? 'text-gray-700 hover:bg-gray-50' 
                                        : 'text-gray-400 cursor-not-allowed opacity-60'
                                } transition-colors`}
                                onclick={meta.current_page === 1 ? "event.preventDefault()" : undefined}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-5 w-5 mr-2"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M15 19l-7-7 7-7"
                                    />
                                </svg>
                                Anterior
                            </a>
                            
                            {/* Números de página */}
                            {Array.from({ length: meta.last_page }, (_, i) => i + 1).map((pageNum) => {
                                const visiblePageNumbers = 1; // Reducido para mostrar menos números
                                const shouldShowPage = 
                                    pageNum === 1 || 
                                    pageNum === meta.last_page || 
                                    Math.abs(pageNum - meta.current_page) < visiblePageNumbers + 1;
                                
                                const isLeftEllipsis = pageNum === 2 && meta.current_page > visiblePageNumbers + 2;
                                const isRightEllipsis = pageNum === meta.last_page - 1 && meta.current_page < meta.last_page - visiblePageNumbers - 1;
                                
                                if (isLeftEllipsis || isRightEllipsis) {
                                    return (
                                        <span class="px-3 py-2 text-gray-500">...</span>
                                    );
                                }
                                
                                if (shouldShowPage) {
                                    return (
                                        <a
                                            href={getPageUrl(pageNum)}
                                            class={`inline-flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium ${
                                                pageNum === meta.current_page
                                                    ? 'bg-primary text-white'
                                                    : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                                            } transition-colors`}
                                        >
                                            {pageNum}
                                        </a>
                                    );
                                }
                                
                                return null;
                            })}
                            
                            {/* Botón Siguiente - siempre visible pero deshabilitado si es la última página */}
                            <a
                                href={meta.current_page < meta.last_page ? getPageUrl(meta.current_page + 1) : '#'}
                                class={`inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium ${
                                    meta.current_page < meta.last_page 
                                        ? 'text-gray-700 hover:bg-gray-50' 
                                        : 'text-gray-400 cursor-not-allowed opacity-60'
                                } transition-colors`}
                                onclick={meta.current_page === meta.last_page ? "event.preventDefault()" : undefined}
                            >
                                Siguiente
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-5 w-5 ml-2"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M9 5l7 7-7 7"
                                    />
                                </svg>
                            </a>
                        </div>
                    </div>
                </>
            ) : (
                <!-- Mensaje cuando no hay artículos disponibles -->
                <div class="py-16 text-center">
                    <div class="bg-white rounded-xl p-8 shadow-md max-w-2xl mx-auto">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-16 w-16 text-gray-300 mx-auto mb-4"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                            />
                        </svg>
                        <h2 class="text-2xl font-bold text-gray-800 mb-2 font-poppins">
                            No hay artículos disponibles
                        </h2>
                        <p class="text-gray-600 mb-6">
                            Estamos trabajando en nuevos contenidos para nuestro blog.
                            ¡Vuelve pronto para ver nuestros artículos!
                        </p>
                        <a
                            href="/"
                            class="inline-flex items-center px-4 py-2 bg-[#2e8d80] text-white rounded-md hover:bg-[#267569] transition-colors"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5 mr-2"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M3 12l2-2m0 0l7-7 7 7m-7-7v14"
                                />
                            </svg>
                            Volver al inicio
                        </a>
                    </div>
                </div>
            )}
        </div>
    </section>
</GeneralLayout>

<style>
    /* Definir el color primario para los enlaces y elementos destacados */
    :root {
        --color-primary: #2e8d80;
    }

    .text-primary {
        color: var(--color-primary);
    }

    /* Limitar el número de líneas visibles en los títulos y descripciones */
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
