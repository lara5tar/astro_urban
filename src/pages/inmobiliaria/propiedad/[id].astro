---
import GeneralLayout from "../../../layouts/GeneralLayout.astro";
import logo from "../../../assets/logo.svg";
import { Image } from "astro:assets";

// Definición de interfaces TypeScript
interface Location {
    line1?: string;
    line2?: string;
    line3?: string;
}

interface Property {
    id: number;
    type: string;
    is_for_sale: boolean;
    investment_formatted?: string;
    location?: Location;
    features?: string[];
    images?: string[];
}

export async function getStaticPaths() {
    // Función para obtener todas las propiedades
    const fetchProperties = async (): Promise<Property[]> => {
        try {
            const response = await fetch(
                "https://urbancms.up.railway.app/api/properties",
            );
            const data = await response.json();
            return data.data || [];
        } catch (error) {
            console.error("Error al obtener propiedades:", error);
            return [];
        }
    };

    const properties = await fetchProperties();

    // Crear rutas para cada propiedad
    return properties.map((property) => ({
        params: { id: property.id.toString() },
        props: { property },
    }));
}

// Definir el tipo de las props
const { property } = Astro.props as { property: Property };

// Formatear ubicación
const formatLocation = (location?: Location): string => {
    if (!location) return "Ubicación no disponible";
    return `${location.line1 || ""}, ${location.line2 || ""}, ${location.line3 || ""}`.replace(
        /^, |, $|, , /g,
        "",
    );
};

// Formatear características específicas
const getFeatureValue = (features?: string[], name?: string): string | null => {
    if (!features || !Array.isArray(features) || !name) return null;

    // Buscar característica por nombre
    const feature = features.find(
        (f) =>
            typeof f === "string" &&
            f.toLowerCase().includes(name.toLowerCase()),
    );

    if (feature) {
        // Extraer el valor numérico de la característica
        const matches = feature.match(/\d+/);
        return matches ? matches[0] : null;
    }

    return null;
};

// Filtrar imágenes válidas
const validImages =
    property.images?.filter((img) => img && img.trim() !== "") || [];
---

<GeneralLayout
    title={`${property.type} - ${property.location?.line1 || "Propiedad"} | Urban Inmobiliaria`}
    description={`${property.type} en ${formatLocation(property.location)} - ${property.investment_formatted}`}
>
    <div class="bg-white">
        <div class="max-w-7xl mx-auto py-5 px-5 font-montserrat text-gray-800">
            <!-- Header responsivo con logo y estado de propiedad -->
            <div
                class="flex flex-col sm:flex-row justify-between items-end mb-5 sm:mb-0 gap-4"
            >
                <div class="hidden sm:flex items-center h-full ml-0 sm:ml-5">
                    <Image
                        src={logo}
                        alt="Urban Inmobiliaria"
                        class="h-20 sm:h-25 md:h-35 object-contain"
                        width={200}
                        height={200}
                    />
                </div>
                <div
                    class="bg-[#2e8d80] w-full sm:w-auto pr-0 pb-2 sm:pb-0 sm:pr-5 flex items-center"
                >
                    <h1
                        class="text-2xl sm:text-3xl md:text-4xl font-bold uppercase tracking-wider text-white px-5 sm:px-10 md:px-20 bg-gray-800 h-full w-full sm:w-auto py-3 sm:py-8 flex items-center justify-center"
                    >
                        {property.is_for_sale ? "VENTA" : "RENTA"}
                    </h1>
                </div>
            </div>

            <!-- Galería de imágenes responsiva -->
            <div class="mb-10">
                <div
                    class="grid grid-cols-1 sm:grid-cols-2 grid-rows-1 sm:grid-rows-2 h-auto sm:h-[500px] md:h-[700px]"
                >
                    <div
                        class="w-full h-[250px] sm:h-full overflow-hidden cursor-pointer gallery-image"
                        data-index="0"
                    >
                        <img
                            src={validImages.length > 0
                                ? validImages[0]
                                : "https://via.placeholder.com/500x500/eeeeee/333333?text=No+disponible"}
                            alt={`${property.type} - Vista principal`}
                            class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                    </div>
                    <div
                        class="w-full h-[250px] sm:h-full overflow-hidden cursor-pointer gallery-image"
                        data-index="1"
                    >
                        <img
                            src={validImages.length > 1
                                ? validImages[1]
                                : "https://via.placeholder.com/500x500/eeeeee/333333?text=No+disponible"}
                            alt={`${property.type} - Interior`}
                            class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                    </div>
                    <div
                        class="w-full h-[250px] sm:h-full overflow-hidden cursor-pointer gallery-image"
                        data-index="2"
                    >
                        <img
                            src={validImages.length > 2
                                ? validImages[2]
                                : "https://via.placeholder.com/500x500/eeeeee/333333?text=No+disponible"}
                            alt={`${property.type} - Interior`}
                            class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                    </div>
                    <div
                        class="w-full h-[250px] sm:h-full overflow-hidden cursor-pointer gallery-image"
                        data-index="3"
                    >
                        <img
                            src={validImages.length > 3
                                ? validImages[3]
                                : "https://via.placeholder.com/500x500/eeeeee/333333?text=No+disponible"}
                            alt={`${property.type} - Interior`}
                            class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                    </div>
                </div>
            </div>

            <!-- Información de la propiedad con diseño responsivo -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <div class="bg-white mb-5">
                        <div class="">
                            <h2
                                class="text-xl md:text-2xl font-bold uppercase text-gray-800 text-center mb-4 border border-gray-800 py-2"
                            >
                                UBICACIÓN
                            </h2>
                            <p class="text-lg md:text-xl text-center">
                                {
                                    property.location?.line1 ||
                                        "Monte Elbrus 336"
                                }<br />
                                {
                                    property.location?.line2 ||
                                        "Frac. Colinas de Juriquilla"
                                }<br />
                                {property.location?.line3 || "Querétaro, Mex."}
                            </p>
                        </div>
                    </div>
                    <div class="bg-white">
                        <div class="">
                            <h2
                                class="text-xl md:text-2xl font-bold uppercase text-gray-800 text-center mb-4 border border-gray-800 py-2"
                            >
                                INVERSIÓN
                            </h2>
                            <p
                                class="text-2xl md:text-3xl font-bold text-gray-800 text-center"
                            >
                                {property.investment_formatted || "$ 5,900,000"}
                            </p>
                        </div>
                    </div>
                </div>

                <div class="bg-[#2e8d80] pr-0 pb-3 sm:pb-0 sm:pr-5">
                    <div
                        class="h-full w-full bg-gray-800 text-white p-5 flex flex-col justify-start"
                    >
                        <h2
                            class="text-xl md:text-2xl font-bold uppercase text-white text-center mb-4 md:mb-6 border border-white py-2"
                        >
                            CARACTERÍSTICAS
                        </h2>

                        {
                            property.features &&
                            property.features.length > 0 ? (
                                <div class="grid grid-cols-1  md:gap-4">
                                    {property.features.map((feature) => (
                                        <div class="flex items-center p-2 md:p-0">
                                            <div class="mr-3 text-[#2e8d80] bg-white rounded-full p-1 flex-shrink-0">
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    class="h-4 w-4"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    stroke="currentColor"
                                                >
                                                    <path
                                                        stroke-linecap="round"
                                                        stroke-linejoin="round"
                                                        stroke-width="2"
                                                        d="M5 13l4 4L19 7"
                                                    />
                                                </svg>
                                            </div>
                                            <span class="text-white text-base md:text-lg">
                                                {feature}
                                            </span>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <p class="text-center text-white">
                                    Características no disponibles
                                </p>
                            )
                        }
                    </div>
                </div>
            </div>

            <!-- Botones de contacto -->
            <div class="mt-0">
                <!-- Usando el componente WhatsAppButton que ya está en GeneralLayout -->
                {
                    /* El componente WhatsAppButton ya está incluido en GeneralLayout */
                }
                <script
                    define:vars={{
                        propertyId: property.id,
                        propertyLocation:
                            property.location?.line1 || "su propiedad",
                    }}
                >
                    // Personalizar el mensaje del botón de WhatsApp para esta propiedad específica
                    document.addEventListener("DOMContentLoaded", () => {
                        const whatsappButton =
                            document.querySelector(".whatsapp-button");
                        if (whatsappButton) {
                            const newMessage = `Hola, estoy interesado en la propiedad con ID: ${propertyId} ubicada en ${propertyLocation}`;
                            whatsappButton.href = `https://wa.link/ktvkib?text=${encodeURIComponent(newMessage)}`;
                        }
                    });
                </script>
            </div>
        </div>
    </div>

    <!-- Modal para carrusel de imágenes -->
    <div
        id="imageModal"
        class="fixed inset-0 bg-black/80 z-50 items-center justify-center hidden"
    >
        <div
            class="relative w-full h-full flex flex-col justify-center items-center p-4"
        >
            lara5tar
            <!-- Botón de cerrar -->
            <button
                id="closeModal"
                class="absolute top-4 right-4 text-white text-4xl z-10 hover:text-gray-300"
            >
                &times;
            </button>

            <!-- Controles del carrusel -->
            <button
                id="prevImage"
                class="absolute left-4 text-white text-6xl z-10 opacity-70 hover:opacity-100 focus:outline-none"
            >
                &#10094;
            </button>
            <button
                id="nextImage"
                class="absolute right-4 text-white text-6xl z-10 opacity-70 hover:opacity-100 focus:outline-none"
            >
                &#10095;
            </button>

            <!-- Contenedor de imágenes -->
            <div
                id="carouselImages"
                class="w-full max-w-4xl h-full max-h-[80vh] flex items-center justify-center"
            >
                <!-- Las imágenes se cargarán dinámicamente aquí -->
            </div>

            <!-- Indicador de imagen actual -->
            <div class="absolute bottom-4 w-full text-center">
                <span
                    id="currentImageIndicator"
                    class="bg-white bg-opacity-70 text-black px-3 py-1 rounded-full text-sm"
                >
                    1 / {validImages.length || 1}
                </span>
            </div>
        </div>
    </div>

    <script define:vars={{ images: validImages }}>
        // Almacenar todas las imágenes válidas
        const galleryImages =
            images.length > 0
                ? images
                : [
                      "https://via.placeholder.com/500x500/eeeeee/333333?text=No+disponible",
                  ];

        let currentImageIndex = 0;

        // Elementos del DOM
        const imageModal = document.getElementById("imageModal");
        const closeModal = document.getElementById("closeModal");
        const prevImage = document.getElementById("prevImage");
        const nextImage = document.getElementById("nextImage");
        const carouselImages = document.getElementById("carouselImages");
        const currentImageIndicator = document.getElementById(
            "currentImageIndicator",
        );
        const galleryElements = document.querySelectorAll(".gallery-image");

        // Función para abrir el modal con una imagen específica
        function openModal(index) {
            if (index >= 0 && index < galleryImages.length) {
                currentImageIndex = index;
                updateCarouselImage();
                imageModal.classList.remove("hidden");
                imageModal.classList.add("flex");
                // Deshabilitar el scroll del body
                document.body.style.overflow = "hidden";
            }
        }

        // Función para cerrar el modal
        function closeModalHandler() {
            imageModal.classList.add("hidden");
            imageModal.classList.remove("flex");
            // Habilitar el scroll del body
            document.body.style.overflow = "";
        }

        // Función para actualizar la imagen del carrusel
        function updateCarouselImage() {
            // Limpiar contenedor
            carouselImages.innerHTML = "";

            // Crear nueva imagen
            const img = document.createElement("img");
            img.src = galleryImages[currentImageIndex];
            img.alt = `Imagen ${currentImageIndex + 1}`;
            img.className = "max-w-full max-h-full object-contain";

            // Agregar imagen al contenedor
            carouselImages.appendChild(img);

            // Actualizar indicador
            currentImageIndicator.textContent = `${currentImageIndex + 1} / ${galleryImages.length}`;
        }

        // Función para ir a la imagen anterior
        function goToPrevImage() {
            currentImageIndex =
                (currentImageIndex - 1 + galleryImages.length) %
                galleryImages.length;
            updateCarouselImage();
        }

        // Función para ir a la siguiente imagen
        function goToNextImage() {
            currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
            updateCarouselImage();
        }

        // Añadir event listeners
        galleryElements.forEach((element) => {
            element.addEventListener("click", () => {
                const index = parseInt(element.getAttribute("data-index")) || 0;
                openModal(index);
            });
        });

        closeModal.addEventListener("click", closeModalHandler);
        prevImage.addEventListener("click", goToPrevImage);
        nextImage.addEventListener("click", goToNextImage);

        // Cerrar modal con tecla Escape
        document.addEventListener("keydown", (e) => {
            if (
                e.key === "Escape" &&
                !imageModal.classList.contains("hidden")
            ) {
                closeModalHandler();
            } else if (
                e.key === "ArrowLeft" &&
                !imageModal.classList.contains("hidden")
            ) {
                goToPrevImage();
            } else if (
                e.key === "ArrowRight" &&
                !imageModal.classList.contains("hidden")
            ) {
                goToNextImage();
            }
        });

        // Cerrar modal haciendo clic en el fondo
        imageModal.addEventListener("click", (e) => {
            if (e.target === imageModal) {
                closeModalHandler();
            }
        });
    </script>
</GeneralLayout>
